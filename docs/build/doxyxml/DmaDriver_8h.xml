<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="DmaDriver_8h" kind="file" language="C++">
    <compoundname>DmaDriver.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">sys/mman.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">unistd.h</includes>
    <includes local="no">signal.h</includes>
    <includes local="no">sys/ioctl.h</includes>
    <includes local="no">sys/signal.h</includes>
    <includes local="no">sys/fcntl.h</includes>
    <includes local="no">sys/socket.h</includes>
    <includedby refid="AxisDriver_8h" local="yes">/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/AxisDriver.h</includedby>
    <includedby refid="PgpDriver_8h" local="yes">/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/PgpDriver.h</includedby>
    <incdepgraph>
      <node id="2">
        <label>stdint.h</label>
      </node>
      <node id="5">
        <label>sys/mman.h</label>
      </node>
      <node id="3">
        <label>stdlib.h</label>
      </node>
      <node id="9">
        <label>sys/ioctl.h</label>
      </node>
      <node id="11">
        <label>sys/fcntl.h</label>
      </node>
      <node id="1">
        <label>/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h</label>
        <link refid="DmaDriver_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>sys/signal.h</label>
      </node>
      <node id="4">
        <label>string.h</label>
      </node>
      <node id="7">
        <label>unistd.h</label>
      </node>
      <node id="8">
        <label>signal.h</label>
      </node>
      <node id="12">
        <label>sys/socket.h</label>
      </node>
      <node id="6">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="8">
        <label>/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/pgp/PgpCard.h</label>
        <link refid="PgpCard_8h"/>
      </node>
      <node id="3">
        <label>/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/PgpDriver.h</label>
        <link refid="PgpDriver_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/pgp/PciStatus.h</label>
        <link refid="PciStatus_8h"/>
      </node>
      <node id="1">
        <label>/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h</label>
        <link refid="DmaDriver_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/pgp/Info.h</label>
        <link refid="Info_8h"/>
      </node>
      <node id="2">
        <label>/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/AxisDriver.h</label>
        <link refid="AxisDriver_8h"/>
      </node>
      <node id="5">
        <label>/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/pgp/EvrStatus.h</label>
        <link refid="EvrStatus_8h"/>
      </node>
      <node id="4">
        <label>/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/pgp/EvrControl.h</label>
        <link refid="EvrControl_8h"/>
      </node>
      <node id="9">
        <label>/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/pgp/Status.h</label>
        <link refid="Status_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structDmaWriteData" prot="public">DmaWriteData</innerclass>
    <innerclass refid="structDmaReadData" prot="public">DmaReadData</innerclass>
    <innerclass refid="structDmaRegisterData" prot="public">DmaRegisterData</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="DmaDriver_8h_1ac016efd4c92730f338793aafe70c4f33" prot="public" static="no">
        <name>DMA_VERSION</name>
        <initializer>0x06</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><hruler/>
 <heading level="2">Title : DMA Driver, Common Header </heading>
</para>
<para>File : <ref refid="DmaDriver_8h" kindref="compound">DmaDriver.h</ref> <heading level="2">Created : 2016-08-08 </heading>
</para>
<para>Description: <heading level="2">Defintions and inline functions for interacting drivers. </heading>
</para>
<para>This file is part of the aes_stream_drivers package. It is subject to the license terms in the LICENSE.txt file found in the top-level directory of this distribution and at: <ulink url="https://confluence.slac.stanford.edu/display/ppareg/LICENSE.html">https://confluence.slac.stanford.edu/display/ppareg/LICENSE.html</ulink>. No part of the aes_stream_drivers package, including this file, may be copied, modified, propagated, or distributed except according to the terms <heading level="2">contained in the LICENSE.txt file. </heading>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" line="30" column="9" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="DmaDriver_8h_1af8fbde8c48698d978cf55bfb331b319d" prot="public" static="no">
        <name>DMA_ERR_FIFO</name>
        <initializer>0x01</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" line="33" column="9" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="DmaDriver_8h_1a1fabb39fed6139adb98b9e976430eb8b" prot="public" static="no">
        <name>DMA_ERR_LEN</name>
        <initializer>0x02</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" line="34" column="9" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="DmaDriver_8h_1a5547b2a22513fc65ba5493c3c8553c25" prot="public" static="no">
        <name>DMA_ERR_MAX</name>
        <initializer>0x04</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" line="35" column="9" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="DmaDriver_8h_1a6a4e8cd632d35cd8f2c77da874786053" prot="public" static="no">
        <name>DMA_ERR_BUS</name>
        <initializer>0x08</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" line="36" column="9" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="DmaDriver_8h_1a2f3ab68e37a66a8bfbee511d722bc833" prot="public" static="no">
        <name>DMA_Get_Buff_Count</name>
        <initializer>0x1001</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" line="39" column="9" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="DmaDriver_8h_1a202ad0447ecaa6358e239020ada1c471" prot="public" static="no">
        <name>DMA_Get_Buff_Size</name>
        <initializer>0x1002</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" line="40" column="9" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="DmaDriver_8h_1a17f0d17cbf276724514a21bbe4b7ac85" prot="public" static="no">
        <name>DMA_Set_Debug</name>
        <initializer>0x1003</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" line="41" column="9" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="DmaDriver_8h_1a68b983281ede8a5c0163e951213013e6" prot="public" static="no">
        <name>DMA_Set_Mask</name>
        <initializer>0x1004</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" line="42" column="9" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="DmaDriver_8h_1a6900d5b9ad955f0310f3f21fe36f430e" prot="public" static="no">
        <name>DMA_Ret_Index</name>
        <initializer>0x1005</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" line="43" column="9" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="DmaDriver_8h_1a1800155037eb3bfe74244daed56c3445" prot="public" static="no">
        <name>DMA_Get_Index</name>
        <initializer>0x1006</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" line="44" column="9" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="DmaDriver_8h_1afc04a4cba59140f5b74dd916702b4c72" prot="public" static="no">
        <name>DMA_Read_Ready</name>
        <initializer>0x1007</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" line="45" column="9" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="DmaDriver_8h_1a72697e08d6a20eec058566152b1a70af" prot="public" static="no">
        <name>DMA_Set_MaskBytes</name>
        <initializer>0x1008</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" line="46" column="9" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="DmaDriver_8h_1a888e03df403e5bb541bc29b0ee896803" prot="public" static="no">
        <name>DMA_Get_Version</name>
        <initializer>0x1009</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" line="47" column="9" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="DmaDriver_8h_1a380ec8c28855d92b765980690d270c5f" prot="public" static="no">
        <name>DMA_Write_Register</name>
        <initializer>0x100A</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" line="48" column="9" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="DmaDriver_8h_1affc5ed3bd37dc3c9ca27bfba9dd134cf" prot="public" static="no">
        <name>DMA_Read_Register</name>
        <initializer>0x100B</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" line="49" column="9" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="DmaDriver_8h_1a3ea544e208d9cd7789c80434f5cc7e4e" prot="public" static="no">
        <name>DMA_Get_RxBuff_Count</name>
        <initializer>0x100C</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" line="50" column="9" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="DmaDriver_8h_1a5febeaaff4b0aae4ae9da2acb3306559" prot="public" static="no">
        <name>DMA_Get_TxBuff_Count</name>
        <initializer>0x100D</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" line="51" column="9" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="DmaDriver_8h_1a4c7473e214b79f11d1eb958e89f1bbad" prot="public" static="no">
        <name>DMA_Get_TxBuffinUser_Count</name>
        <initializer>0x100F</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" line="52" column="9" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="DmaDriver_8h_1a5d1295f5004a81b21a7ea3d93fd2d9ad" prot="public" static="no">
        <name>DMA_Get_TxBuffinHW_Count</name>
        <initializer>0x1010</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" line="53" column="9" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="DmaDriver_8h_1abcd0e8eb6f0a99046436febc3f467d2b" prot="public" static="no">
        <name>DMA_Get_TxBuffinPreHWQ_Count</name>
        <initializer>0x1011</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" line="54" column="9" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="DmaDriver_8h_1ae09eef96d966393e651dbcbbffdce7e3" prot="public" static="no">
        <name>DMA_Get_TxBuffinSWQ_Count</name>
        <initializer>0x1012</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" line="55" column="9" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="DmaDriver_8h_1a6ea630aad920d765d6f16935bf7b33b4" prot="public" static="no">
        <name>DMA_Get_TxBuffMiss_Count</name>
        <initializer>0x1013</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" line="56" column="9" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="DmaDriver_8h_1a784881c5ca3eb26228dcaf3a3acddbc8" prot="public" static="no">
        <name>DMA_MASK_SIZE</name>
        <initializer>512</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" line="59" column="9" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="DmaDriver_8h_1afd00d744425224fe62b0420b80aa3ba0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ssize_t</type>
        <definition>static ssize_t dmaWrite</definition>
        <argsstring>(int32_t fd, const void *buf, size_t size, uint32_t flags, uint32_t dest)</argsstring>
        <name>dmaWrite</name>
        <param>
          <type>int32_t</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" line="106" column="23" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" bodystart="106" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="DmaDriver_8h_1a4ab7cd970280ee290d4ce0937b7ac49f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ssize_t</type>
        <definition>static ssize_t dmaWriteIndex</definition>
        <argsstring>(int32_t fd, uint32_t index, size_t size, uint32_t flags, uint32_t dest)</argsstring>
        <name>dmaWriteIndex</name>
        <param>
          <type>int32_t</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" line="120" column="23" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" bodystart="120" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="DmaDriver_8h_1ab4fc7d1625925486d71681c96b7e04eb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ssize_t</type>
        <definition>static ssize_t dmaWriteVector</definition>
        <argsstring>(int32_t fd, struct iovec *iov, size_t iovlen, uint32_t begFlags, uint32_t midFlags, uint32_t endFlags, uint32_t dest)</argsstring>
        <name>dmaWriteVector</name>
        <param>
          <type>int32_t</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>struct iovec *</type>
          <declname>iov</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>iovlen</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>begFlags</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>midFlags</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>endFlags</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" line="134" column="23" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" bodystart="134" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="DmaDriver_8h_1ac002d0b270e9e29b310a74c356c36f48" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ssize_t</type>
        <definition>static ssize_t dmaWriteIndexVector</definition>
        <argsstring>(int32_t fd, struct iovec *iov, size_t iovlen, uint32_t begFlags, uint32_t midFlags, uint32_t endFlags, uint32_t dest)</argsstring>
        <name>dmaWriteIndexVector</name>
        <param>
          <type>int32_t</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>struct iovec *</type>
          <declname>iov</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>iovlen</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>begFlags</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>midFlags</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>endFlags</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" line="163" column="23" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" bodystart="163" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="DmaDriver_8h_1aed8ef1cb23df5358891c1b5c522aed08" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ssize_t</type>
        <definition>static ssize_t dmaRead</definition>
        <argsstring>(int32_t fd, void *buf, size_t maxSize, uint32_t *flags, uint32_t *error, uint32_t *dest)</argsstring>
        <name>dmaRead</name>
        <param>
          <type>int32_t</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>maxSize</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>error</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" line="192" column="23" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" bodystart="192" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="DmaDriver_8h_1aa38b4096d85e7daeb03be1a1f10722ca" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ssize_t</type>
        <definition>static ssize_t dmaReadIndex</definition>
        <argsstring>(int32_t fd, uint32_t *index, uint32_t *flags, uint32_t *error, uint32_t *dest)</argsstring>
        <name>dmaReadIndex</name>
        <param>
          <type>int32_t</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>error</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" line="214" column="23" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" bodystart="214" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="DmaDriver_8h_1a73a6e25f2c2c92a173d6cdc8fb1a8889" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ssize_t</type>
        <definition>static ssize_t dmaReadBulkIndex</definition>
        <argsstring>(int32_t fd, uint32_t count, int32_t *ret, uint32_t *index, uint32_t *flags, uint32_t *error, uint32_t *dest)</argsstring>
        <name>dmaReadBulkIndex</name>
        <param>
          <type>int32_t</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>ret</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>error</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" line="234" column="23" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" bodystart="234" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="DmaDriver_8h_1aa8a8f2711417f22fba6e923022376f77" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ssize_t</type>
        <definition>static ssize_t dmaRetIndex</definition>
        <argsstring>(int32_t fd, uint32_t index)</argsstring>
        <name>dmaRetIndex</name>
        <param>
          <type>int32_t</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" line="256" column="23" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" bodystart="256" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="DmaDriver_8h_1afffccddbaae11c0e1928d5081c40f9cc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ssize_t</type>
        <definition>static ssize_t dmaRetIndexes</definition>
        <argsstring>(int32_t fd, uint32_t count, uint32_t *indexes)</argsstring>
        <name>dmaRetIndexes</name>
        <param>
          <type>int32_t</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>indexes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" line="263" column="23" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" bodystart="263" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="DmaDriver_8h_1af13134152f22c30d623c0ddeeb9e62d0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t dmaGetIndex</definition>
        <argsstring>(int32_t fd)</argsstring>
        <name>dmaGetIndex</name>
        <param>
          <type>int32_t</type>
          <declname>fd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" line="270" column="24" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" bodystart="270" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="DmaDriver_8h_1ad5f5aca8748793542a18c31b9083a083" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ssize_t</type>
        <definition>static ssize_t dmaReadReady</definition>
        <argsstring>(int32_t fd)</argsstring>
        <name>dmaReadReady</name>
        <param>
          <type>int32_t</type>
          <declname>fd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" line="275" column="23" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" bodystart="275" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="DmaDriver_8h_1a9c4708a832dc002df969b27681b605dd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ssize_t</type>
        <definition>static ssize_t dmaGetRxBuffCount</definition>
        <argsstring>(int32_t fd)</argsstring>
        <name>dmaGetRxBuffCount</name>
        <param>
          <type>int32_t</type>
          <declname>fd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" line="280" column="23" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" bodystart="280" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="DmaDriver_8h_1a2d2139564df199d02420e9bbc5285b80" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ssize_t</type>
        <definition>static ssize_t dmaGetTxBuffCount</definition>
        <argsstring>(int32_t fd)</argsstring>
        <name>dmaGetTxBuffCount</name>
        <param>
          <type>int32_t</type>
          <declname>fd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" line="285" column="23" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" bodystart="285" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="DmaDriver_8h_1a9aff3927628e140feb6201a2c326fc75" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ssize_t</type>
        <definition>static ssize_t dmaGetBuffSize</definition>
        <argsstring>(int32_t fd)</argsstring>
        <name>dmaGetBuffSize</name>
        <param>
          <type>int32_t</type>
          <declname>fd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" line="290" column="23" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" bodystart="290" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="DmaDriver_8h_1a6cbfd4cc7df19fbc2cdc238dfa6b1b73" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void **</type>
        <definition>static void** dmaMapDma</definition>
        <argsstring>(int32_t fd, uint32_t *count, uint32_t *size)</argsstring>
        <name>dmaMapDma</name>
        <param>
          <type>int32_t</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>count</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" line="295" column="21" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" bodystart="295" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="DmaDriver_8h_1adcf3ea759d1130e72bb621c08cca2629" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ssize_t</type>
        <definition>static ssize_t dmaUnMapDma</definition>
        <argsstring>(int32_t fd, void **buffer)</argsstring>
        <name>dmaUnMapDma</name>
        <param>
          <type>int32_t</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" line="330" column="23" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" bodystart="330" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="DmaDriver_8h_1abdb2590fb0ec582c6697f14d1c9e01e4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ssize_t</type>
        <definition>static ssize_t dmaSetDebug</definition>
        <argsstring>(int32_t fd, uint32_t level)</argsstring>
        <name>dmaSetDebug</name>
        <param>
          <type>int32_t</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" line="345" column="23" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" bodystart="345" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="DmaDriver_8h_1abe985c96e62c9e3f7cbaea2e2fffe588" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void dmaAssignHandler</definition>
        <argsstring>(int32_t fd, void(*handler)(int32_t))</argsstring>
        <name>dmaAssignHandler</name>
        <param>
          <type>int32_t</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>void(*)(int32_t)</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" line="350" column="20" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" bodystart="350" bodyend="362"/>
      </memberdef>
      <memberdef kind="function" id="DmaDriver_8h_1a00050427095a8a97a16628167a9b8411" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ssize_t</type>
        <definition>static ssize_t dmaSetMask</definition>
        <argsstring>(int32_t fd, uint32_t mask)</argsstring>
        <name>dmaSetMask</name>
        <param>
          <type>int32_t</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" line="365" column="23" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" bodystart="365" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="DmaDriver_8h_1a6792bef0631a653d5a1799d05e55e7f8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void dmaInitMaskBytes</definition>
        <argsstring>(uint8_t *mask)</argsstring>
        <name>dmaInitMaskBytes</name>
        <param>
          <type>uint8_t *</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" line="370" column="20" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" bodystart="370" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="DmaDriver_8h_1a6b90f7249599dd58daa55b03a828f9f9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void dmaAddMaskBytes</definition>
        <argsstring>(uint8_t *mask, uint32_t dest)</argsstring>
        <name>dmaAddMaskBytes</name>
        <param>
          <type>uint8_t *</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" line="375" column="20" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" bodystart="375" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="DmaDriver_8h_1a7d2f1097e838652d7a6a50435706fb80" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ssize_t</type>
        <definition>static ssize_t dmaSetMaskBytes</definition>
        <argsstring>(int32_t fd, uint8_t *mask)</argsstring>
        <name>dmaSetMaskBytes</name>
        <param>
          <type>int32_t</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" line="387" column="23" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" bodystart="387" bodyend="389"/>
      </memberdef>
      <memberdef kind="function" id="DmaDriver_8h_1ad91e3706780af90a1d36dcea618cbb4c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ssize_t</type>
        <definition>static ssize_t dmaCheckVersion</definition>
        <argsstring>(int32_t fd)</argsstring>
        <name>dmaCheckVersion</name>
        <param>
          <type>int32_t</type>
          <declname>fd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" line="392" column="23" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" bodystart="392" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="DmaDriver_8h_1a5d4d77ca9ee0862c4365c50c10bfc5bd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ssize_t</type>
        <definition>static ssize_t dmaWriteRegister</definition>
        <argsstring>(int32_t fd, uint64_t address, uint32_t data)</argsstring>
        <name>dmaWriteRegister</name>
        <param>
          <type>int32_t</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>address</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" line="399" column="23" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" bodystart="399" bodyend="405"/>
      </memberdef>
      <memberdef kind="function" id="DmaDriver_8h_1a53607a4b463d807f21c99c325cd9c10b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ssize_t</type>
        <definition>static ssize_t dmaReadRegister</definition>
        <argsstring>(int32_t fd, uint64_t address, uint32_t *data)</argsstring>
        <name>dmaReadRegister</name>
        <param>
          <type>int32_t</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>address</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" line="408" column="23" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" bodystart="408" bodyend="419"/>
      </memberdef>
      <memberdef kind="function" id="DmaDriver_8h_1ac28c7b53f7ba2a23704cecb0938b700b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void *</type>
        <definition>static void* dmaMapRegister</definition>
        <argsstring>(int32_t fd, off_t offset, uint32_t size)</argsstring>
        <name>dmaMapRegister</name>
        <param>
          <type>int32_t</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>off_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" line="422" column="21" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" bodystart="422" bodyend="434"/>
      </memberdef>
      <memberdef kind="function" id="DmaDriver_8h_1a757fc122a413915c87e9e38aa21b5369" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ssize_t</type>
        <definition>static ssize_t dmaUnMapRegister</definition>
        <argsstring>(int32_t fd, void *ptr, uint32_t size)</argsstring>
        <name>dmaUnMapRegister</name>
        <param>
          <type>int32_t</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" line="437" column="23" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h" bodystart="437" bodyend="440"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="20"><highlight class="preprocessor">#ifndef<sp/>__DMA_DRIVER_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__DMA_DRIVER_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DMA_IN_KERNEL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;linux/types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>API<sp/>Version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="DmaDriver_8h_1ac016efd4c92730f338793aafe70c4f33" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DMA_VERSION<sp/><sp/>0x06</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Error<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="DmaDriver_8h_1af8fbde8c48698d978cf55bfb331b319d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DMA_ERR_FIFO<sp/>0x01</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="DmaDriver_8h_1a1fabb39fed6139adb98b9e976430eb8b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DMA_ERR_LEN<sp/><sp/>0x02</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="DmaDriver_8h_1a5547b2a22513fc65ba5493c3c8553c25" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DMA_ERR_MAX<sp/><sp/>0x04</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="DmaDriver_8h_1a6a4e8cd632d35cd8f2c77da874786053" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DMA_ERR_BUS<sp/><sp/>0x08</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Commands</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="DmaDriver_8h_1a2f3ab68e37a66a8bfbee511d722bc833" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DMA_Get_Buff_Count<sp/><sp/><sp/>0x1001</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="DmaDriver_8h_1a202ad0447ecaa6358e239020ada1c471" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DMA_Get_Buff_Size<sp/><sp/><sp/><sp/>0x1002</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="DmaDriver_8h_1a17f0d17cbf276724514a21bbe4b7ac85" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DMA_Set_Debug<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x1003</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="DmaDriver_8h_1a68b983281ede8a5c0163e951213013e6" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DMA_Set_Mask<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x1004</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="DmaDriver_8h_1a6900d5b9ad955f0310f3f21fe36f430e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DMA_Ret_Index<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x1005</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="DmaDriver_8h_1a1800155037eb3bfe74244daed56c3445" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DMA_Get_Index<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x1006</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="DmaDriver_8h_1afc04a4cba59140f5b74dd916702b4c72" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DMA_Read_Ready<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x1007</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="DmaDriver_8h_1a72697e08d6a20eec058566152b1a70af" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DMA_Set_MaskBytes<sp/><sp/><sp/><sp/>0x1008</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="DmaDriver_8h_1a888e03df403e5bb541bc29b0ee896803" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DMA_Get_Version<sp/><sp/><sp/><sp/><sp/><sp/>0x1009</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="DmaDriver_8h_1a380ec8c28855d92b765980690d270c5f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DMA_Write_Register<sp/><sp/><sp/>0x100A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="DmaDriver_8h_1affc5ed3bd37dc3c9ca27bfba9dd134cf" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DMA_Read_Register<sp/><sp/><sp/><sp/>0x100B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="DmaDriver_8h_1a3ea544e208d9cd7789c80434f5cc7e4e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DMA_Get_RxBuff_Count<sp/>0x100C</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="DmaDriver_8h_1a5febeaaff4b0aae4ae9da2acb3306559" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DMA_Get_TxBuff_Count<sp/>0x100D</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="DmaDriver_8h_1a4c7473e214b79f11d1eb958e89f1bbad" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DMA_Get_TxBuffinUser_Count<sp/>0x100F</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="DmaDriver_8h_1a5d1295f5004a81b21a7ea3d93fd2d9ad" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DMA_Get_TxBuffinHW_Count<sp/>0x1010</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="DmaDriver_8h_1abcd0e8eb6f0a99046436febc3f467d2b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DMA_Get_TxBuffinPreHWQ_Count<sp/>0x1011</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="DmaDriver_8h_1ae09eef96d966393e651dbcbbffdce7e3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DMA_Get_TxBuffinSWQ_Count<sp/>0x1012</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="DmaDriver_8h_1a6ea630aad920d765d6f16935bf7b33b4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DMA_Get_TxBuffMiss_Count<sp/>0x1013</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Mask<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="DmaDriver_8h_1a784881c5ca3eb26228dcaf3a3acddbc8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DMA_MASK_SIZE<sp/>512</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TX<sp/>Structure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Size<sp/>=<sp/>0<sp/>for<sp/>return<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="structDmaWriteData" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structDmaWriteData" kindref="compound">DmaWriteData</ref><sp/>{</highlight></codeline>
<codeline lineno="64" refid="structDmaWriteData_1a9f57e6a05e407ddf392ab4174c744e10" refkind="member"><highlight class="normal"><sp/><sp/><sp/>uint64_t<sp/><sp/><ref refid="structDmaWriteData_1a9f57e6a05e407ddf392ab4174c744e10" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="65" refid="structDmaWriteData_1ae251e9222bd752bf6de297c7cfb729b5" refkind="member"><highlight class="normal"><sp/><sp/><sp/>uint32_t<sp/><sp/><ref refid="structDmaWriteData_1ae251e9222bd752bf6de297c7cfb729b5" kindref="member">dest</ref>;</highlight></codeline>
<codeline lineno="66" refid="structDmaWriteData_1aca468ab95d99b3aefd9c552b08df7a2a" refkind="member"><highlight class="normal"><sp/><sp/><sp/>uint32_t<sp/><sp/><ref refid="structDmaWriteData_1aca468ab95d99b3aefd9c552b08df7a2a" kindref="member">flags</ref>;</highlight></codeline>
<codeline lineno="67" refid="structDmaWriteData_1aaa897b0165287263ec00e152a9311c88" refkind="member"><highlight class="normal"><sp/><sp/><sp/>uint32_t<sp/><sp/><ref refid="structDmaWriteData_1aaa897b0165287263ec00e152a9311c88" kindref="member">index</ref>;</highlight></codeline>
<codeline lineno="68" refid="structDmaWriteData_1a26b28bdc8f1da01d873c2297b6655d15" refkind="member"><highlight class="normal"><sp/><sp/><sp/>uint32_t<sp/><sp/><ref refid="structDmaWriteData_1a26b28bdc8f1da01d873c2297b6655d15" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="69" refid="structDmaWriteData_1a8e9774e1b90df054564ed7a99722559b" refkind="member"><highlight class="normal"><sp/><sp/><sp/>uint32_t<sp/><sp/><ref refid="structDmaWriteData_1a8e9774e1b90df054564ed7a99722559b" kindref="member">is32</ref>;</highlight></codeline>
<codeline lineno="70" refid="structDmaWriteData_1a6a0b4f564bb87031e62115dfe8031f5d" refkind="member"><highlight class="normal"><sp/><sp/><sp/>uint32_t<sp/><sp/><ref refid="structDmaWriteData_1a6a0b4f564bb87031e62115dfe8031f5d" kindref="member">pad</ref>;</highlight></codeline>
<codeline lineno="71"><highlight class="normal">};</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//<sp/>RX<sp/>Structure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Data<sp/>=<sp/>0<sp/>for<sp/>read<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="structDmaReadData" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structDmaReadData" kindref="compound">DmaReadData</ref><sp/>{</highlight></codeline>
<codeline lineno="76" refid="structDmaReadData_1a6a16a00391e2c16f616d036f1827e216" refkind="member"><highlight class="normal"><sp/><sp/><sp/>uint64_t<sp/><sp/><sp/><ref refid="structDmaReadData_1a6a16a00391e2c16f616d036f1827e216" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="77" refid="structDmaReadData_1a980d88a39f4d557a88ed0c3466344d0b" refkind="member"><highlight class="normal"><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><ref refid="structDmaReadData_1a980d88a39f4d557a88ed0c3466344d0b" kindref="member">dest</ref>;</highlight></codeline>
<codeline lineno="78" refid="structDmaReadData_1a53f11dacc807b6536eae13e72de25ca1" refkind="member"><highlight class="normal"><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><ref refid="structDmaReadData_1a53f11dacc807b6536eae13e72de25ca1" kindref="member">flags</ref>;</highlight></codeline>
<codeline lineno="79" refid="structDmaReadData_1a32d79a66e220cc7f8421c0e045c31f6b" refkind="member"><highlight class="normal"><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><ref refid="structDmaReadData_1a32d79a66e220cc7f8421c0e045c31f6b" kindref="member">index</ref>;</highlight></codeline>
<codeline lineno="80" refid="structDmaReadData_1a08f2e6ec00655bfc8710dccd54617268" refkind="member"><highlight class="normal"><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><ref refid="structDmaReadData_1a08f2e6ec00655bfc8710dccd54617268" kindref="member">error</ref>;</highlight></codeline>
<codeline lineno="81" refid="structDmaReadData_1a6251f657463df6bd6c6a17842d76ce6d" refkind="member"><highlight class="normal"><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><ref refid="structDmaReadData_1a6251f657463df6bd6c6a17842d76ce6d" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="82" refid="structDmaReadData_1a68a10719a2c1b90f4e353c29e70381f0" refkind="member"><highlight class="normal"><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><ref refid="structDmaReadData_1a68a10719a2c1b90f4e353c29e70381f0" kindref="member">is32</ref>;</highlight></codeline>
<codeline lineno="83" refid="structDmaReadData_1a96e4e54d353a6617a184abb041910e22" refkind="member"><highlight class="normal"><sp/><sp/><sp/>int32_t<sp/><sp/><sp/><sp/><ref refid="structDmaReadData_1a96e4e54d353a6617a184abb041910e22" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="84"><highlight class="normal">};</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Register<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="structDmaRegisterData" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structDmaRegisterData" kindref="compound">DmaRegisterData</ref><sp/>{</highlight></codeline>
<codeline lineno="88" refid="structDmaRegisterData_1a20a8692e7ab6f5b5fdeb8f09e58c5dab" refkind="member"><highlight class="normal"><sp/><sp/><sp/>uint64_t<sp/><sp/><sp/><ref refid="structDmaRegisterData_1a20a8692e7ab6f5b5fdeb8f09e58c5dab" kindref="member">address</ref>;</highlight></codeline>
<codeline lineno="89" refid="structDmaRegisterData_1a4bb51c7f258e9e30b20a04ef04a9870a" refkind="member"><highlight class="normal"><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><ref refid="structDmaRegisterData_1a4bb51c7f258e9e30b20a04ef04a9870a" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="90"><highlight class="normal">};</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Everything<sp/>below<sp/>is<sp/>hidden<sp/>during<sp/>kernel<sp/>module<sp/>compile</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DMA_IN_KERNEL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/mman.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;signal.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/ioctl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/signal.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/fcntl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/socket.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Write<sp/>Frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="DmaDriver_8h_1afd00d744425224fe62b0420b80aa3ba0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ssize_t<sp/><ref refid="DmaDriver_8h_1afd00d744425224fe62b0420b80aa3ba0" kindref="member">dmaWrite</ref>(int32_t<sp/>fd,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/>uint32_t<sp/>flags,<sp/>uint32_t<sp/>dest)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structDmaWriteData" kindref="compound">DmaWriteData</ref><sp/>w;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/>memset(&amp;w,0,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structDmaWriteData" kindref="compound">DmaWriteData</ref>));</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/>w.<ref refid="structDmaWriteData_1ae251e9222bd752bf6de297c7cfb729b5" kindref="member">dest</ref><sp/><sp/><sp/><sp/>=<sp/><ref refid="structDmaWriteData_1ae251e9222bd752bf6de297c7cfb729b5" kindref="member">dest</ref>;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/>w.<ref refid="structDmaWriteData_1aca468ab95d99b3aefd9c552b08df7a2a" kindref="member">flags</ref><sp/><sp/><sp/>=<sp/><ref refid="structDmaWriteData_1aca468ab95d99b3aefd9c552b08df7a2a" kindref="member">flags</ref>;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/>w.<ref refid="structDmaWriteData_1a26b28bdc8f1da01d873c2297b6655d15" kindref="member">size</ref><sp/><sp/><sp/><sp/>=<sp/><ref refid="structDmaWriteData_1a26b28bdc8f1da01d873c2297b6655d15" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/>w.<ref refid="structDmaWriteData_1a8e9774e1b90df054564ed7a99722559b" kindref="member">is32</ref><sp/><sp/><sp/><sp/>=<sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)==4);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/>w.<ref refid="structDmaWriteData_1a9f57e6a05e407ddf392ab4174c744e10" kindref="member">data</ref><sp/><sp/><sp/><sp/>=<sp/>(uint64_t)buf;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(write(fd,&amp;w,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structDmaWriteData" kindref="compound">DmaWriteData</ref>)));</highlight></codeline>
<codeline lineno="117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Write<sp/>Frame,<sp/>memory<sp/>mapped</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120" refid="DmaDriver_8h_1a4ab7cd970280ee290d4ce0937b7ac49f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ssize_t<sp/><ref refid="DmaDriver_8h_1a4ab7cd970280ee290d4ce0937b7ac49f" kindref="member">dmaWriteIndex</ref>(int32_t<sp/>fd,<sp/>uint32_t<sp/><ref refid="structDmaWriteData_1aaa897b0165287263ec00e152a9311c88" kindref="member">index</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structDmaWriteData_1a26b28bdc8f1da01d873c2297b6655d15" kindref="member">size</ref>,<sp/>uint32_t<sp/><ref refid="structDmaWriteData_1aca468ab95d99b3aefd9c552b08df7a2a" kindref="member">flags</ref>,<sp/>uint32_t<sp/><ref refid="structDmaWriteData_1ae251e9222bd752bf6de297c7cfb729b5" kindref="member">dest</ref>)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structDmaWriteData" kindref="compound">DmaWriteData</ref><sp/>w;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/>memset(&amp;w,0,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structDmaWriteData" kindref="compound">DmaWriteData</ref>));</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/>w.<ref refid="structDmaWriteData_1ae251e9222bd752bf6de297c7cfb729b5" kindref="member">dest</ref><sp/><sp/><sp/><sp/>=<sp/><ref refid="structDmaWriteData_1ae251e9222bd752bf6de297c7cfb729b5" kindref="member">dest</ref>;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/>w.<ref refid="structDmaWriteData_1aca468ab95d99b3aefd9c552b08df7a2a" kindref="member">flags</ref><sp/><sp/><sp/>=<sp/><ref refid="structDmaWriteData_1aca468ab95d99b3aefd9c552b08df7a2a" kindref="member">flags</ref>;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/>w.<ref refid="structDmaWriteData_1a26b28bdc8f1da01d873c2297b6655d15" kindref="member">size</ref><sp/><sp/><sp/><sp/>=<sp/><ref refid="structDmaWriteData_1a26b28bdc8f1da01d873c2297b6655d15" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/>w.<ref refid="structDmaWriteData_1a8e9774e1b90df054564ed7a99722559b" kindref="member">is32</ref><sp/><sp/><sp/><sp/>=<sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)==4);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/>w.<ref refid="structDmaWriteData_1aaa897b0165287263ec00e152a9311c88" kindref="member">index</ref><sp/><sp/><sp/>=<sp/><ref refid="structDmaWriteData_1aaa897b0165287263ec00e152a9311c88" kindref="member">index</ref>;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(write(fd,&amp;w,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structDmaWriteData" kindref="compound">DmaWriteData</ref>)));</highlight></codeline>
<codeline lineno="131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Write<sp/>frame<sp/>from<sp/>iovector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134" refid="DmaDriver_8h_1ab4fc7d1625925486d71681c96b7e04eb" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ssize_t<sp/><ref refid="DmaDriver_8h_1ab4fc7d1625925486d71681c96b7e04eb" kindref="member">dmaWriteVector</ref>(int32_t<sp/>fd,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>iovec<sp/>*iov,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>iovlen,</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>begFlags,<sp/>uint32_t<sp/>midFlags,<sp/>uint32_t<sp/>endFlags,<sp/>uint32_t<sp/><ref refid="structDmaWriteData_1ae251e9222bd752bf6de297c7cfb729b5" kindref="member">dest</ref>)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/>uint32_t<sp/>x;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/>ssize_t<sp/>ret;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/>ssize_t<sp/>res;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structDmaWriteData" kindref="compound">DmaWriteData</ref><sp/>w;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/>ret<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x=0;<sp/>x<sp/>&lt;<sp/>iovlen;<sp/>x++)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memset(&amp;w,0,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structDmaWriteData" kindref="compound">DmaWriteData</ref>));</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>w.<ref refid="structDmaWriteData_1ae251e9222bd752bf6de297c7cfb729b5" kindref="member">dest</ref><sp/><sp/><sp/><sp/>=<sp/><ref refid="structDmaWriteData_1ae251e9222bd752bf6de297c7cfb729b5" kindref="member">dest</ref>;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>w.<ref refid="structDmaWriteData_1aca468ab95d99b3aefd9c552b08df7a2a" kindref="member">flags</ref><sp/><sp/><sp/>=<sp/>(x==0)?begFlags:((x==(iovlen-1))?endFlags:midFlags);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>w.<ref refid="structDmaWriteData_1a26b28bdc8f1da01d873c2297b6655d15" kindref="member">size</ref><sp/><sp/><sp/><sp/>=<sp/>iov[x].iov_len;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>w.<ref refid="structDmaWriteData_1a8e9774e1b90df054564ed7a99722559b" kindref="member">is32</ref><sp/><sp/><sp/><sp/>=<sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)==4);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>w.<ref refid="structDmaWriteData_1a9f57e6a05e407ddf392ab4174c744e10" kindref="member">data</ref><sp/><sp/><sp/><sp/>=<sp/>(uint64_t)iov[x].iov_base;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>write(fd,&amp;w,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structDmaWriteData" kindref="compound">DmaWriteData</ref>));</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>res<sp/>&lt;<sp/>0<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(res);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>res<sp/>==<sp/>0<sp/>)<sp/>usleep(10);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>ret<sp/>+=<sp/>res;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(res<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(ret);</highlight></codeline>
<codeline lineno="160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Write<sp/>Frame,<sp/>memory<sp/>mapped<sp/>from<sp/>iovector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163" refid="DmaDriver_8h_1ac002d0b270e9e29b310a74c356c36f48" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ssize_t<sp/><ref refid="DmaDriver_8h_1ac002d0b270e9e29b310a74c356c36f48" kindref="member">dmaWriteIndexVector</ref>(int32_t<sp/>fd,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>iovec<sp/>*iov,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>iovlen,</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>begFlags,<sp/>uint32_t<sp/>midFlags,<sp/>uint32_t<sp/>endFlags,<sp/>uint32_t<sp/><ref refid="structDmaWriteData_1ae251e9222bd752bf6de297c7cfb729b5" kindref="member">dest</ref>)<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/>uint32_t<sp/>x;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/>ssize_t<sp/>ret;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/>ssize_t<sp/>res;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structDmaWriteData" kindref="compound">DmaWriteData</ref><sp/>w;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/>ret<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x=0;<sp/>x<sp/>&lt;<sp/>iovlen;<sp/>x++)<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memset(&amp;w,0,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structDmaWriteData" kindref="compound">DmaWriteData</ref>));</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>w.<ref refid="structDmaWriteData_1ae251e9222bd752bf6de297c7cfb729b5" kindref="member">dest</ref><sp/><sp/><sp/><sp/>=<sp/><ref refid="structDmaWriteData_1ae251e9222bd752bf6de297c7cfb729b5" kindref="member">dest</ref>;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>w.<ref refid="structDmaWriteData_1aca468ab95d99b3aefd9c552b08df7a2a" kindref="member">flags</ref><sp/><sp/><sp/>=<sp/>(x==0)?begFlags:((x==(iovlen-1))?endFlags:midFlags);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>w.<ref refid="structDmaWriteData_1a26b28bdc8f1da01d873c2297b6655d15" kindref="member">size</ref><sp/><sp/><sp/><sp/>=<sp/>iov[x].iov_len;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>w.<ref refid="structDmaWriteData_1a8e9774e1b90df054564ed7a99722559b" kindref="member">is32</ref><sp/><sp/><sp/><sp/>=<sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)==4);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>w.<ref refid="structDmaWriteData_1aaa897b0165287263ec00e152a9311c88" kindref="member">index</ref><sp/><sp/><sp/>=<sp/>(uint32_t)(((uint64_t)iov[x].iov_base)<sp/>&amp;<sp/>0xFFFFFFFF);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>write(fd,&amp;w,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structDmaWriteData" kindref="compound">DmaWriteData</ref>));</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>res<sp/>&lt;<sp/>0<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(res);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>res<sp/>==<sp/>0<sp/>)<sp/>usleep(10);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>ret<sp/>+=<sp/>res;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(res<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(ret);</highlight></codeline>
<codeline lineno="189"><highlight class="normal">}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Receive<sp/>Frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192" refid="DmaDriver_8h_1aed8ef1cb23df5358891c1b5c522aed08" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ssize_t<sp/><ref refid="DmaDriver_8h_1aed8ef1cb23df5358891c1b5c522aed08" kindref="member">dmaRead</ref>(int32_t<sp/>fd,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>maxSize,<sp/>uint32_t<sp/>*<sp/><ref refid="structDmaWriteData_1aca468ab95d99b3aefd9c552b08df7a2a" kindref="member">flags</ref>,<sp/>uint32_t<sp/>*error,<sp/>uint32_t<sp/>*<sp/><ref refid="structDmaWriteData_1ae251e9222bd752bf6de297c7cfb729b5" kindref="member">dest</ref>)<sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structDmaReadData" kindref="compound">DmaReadData</ref><sp/>r;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/>ssize_t<sp/><ref refid="structDmaReadData_1a96e4e54d353a6617a184abb041910e22" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/>memset(&amp;r,0,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structDmaReadData" kindref="compound">DmaReadData</ref>));</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/>r.<ref refid="structDmaReadData_1a6251f657463df6bd6c6a17842d76ce6d" kindref="member">size</ref><sp/>=<sp/>maxSize;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/>r.<ref refid="structDmaReadData_1a68a10719a2c1b90f4e353c29e70381f0" kindref="member">is32</ref><sp/>=<sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)==4);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/>r.<ref refid="structDmaReadData_1a6a16a00391e2c16f616d036f1827e216" kindref="member">data</ref><sp/>=<sp/>(uint64_t)buf;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><ref refid="structDmaReadData_1a96e4e54d353a6617a184abb041910e22" kindref="member">ret</ref><sp/>=<sp/>read(fd,&amp;r,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structDmaReadData" kindref="compound">DmaReadData</ref>));</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="structDmaReadData_1a96e4e54d353a6617a184abb041910e22" kindref="member">ret</ref><sp/>&lt;=<sp/>0<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(<ref refid="structDmaReadData_1a96e4e54d353a6617a184abb041910e22" kindref="member">ret</ref>);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="structDmaReadData_1a980d88a39f4d557a88ed0c3466344d0b" kindref="member">dest</ref><sp/><sp/>!=<sp/>NULL<sp/>)<sp/>*<ref refid="structDmaReadData_1a980d88a39f4d557a88ed0c3466344d0b" kindref="member">dest</ref><sp/><sp/>=<sp/>r.<ref refid="structDmaReadData_1a980d88a39f4d557a88ed0c3466344d0b" kindref="member">dest</ref>;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="structDmaReadData_1a53f11dacc807b6536eae13e72de25ca1" kindref="member">flags</ref><sp/>!=<sp/>NULL<sp/>)<sp/>*<ref refid="structDmaReadData_1a53f11dacc807b6536eae13e72de25ca1" kindref="member">flags</ref><sp/>=<sp/>r.<ref refid="structDmaReadData_1a53f11dacc807b6536eae13e72de25ca1" kindref="member">flags</ref>;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="structDmaReadData_1a08f2e6ec00655bfc8710dccd54617268" kindref="member">error</ref><sp/>!=<sp/>NULL<sp/>)<sp/>*<ref refid="structDmaReadData_1a08f2e6ec00655bfc8710dccd54617268" kindref="member">error</ref><sp/>=<sp/>r.<ref refid="structDmaReadData_1a08f2e6ec00655bfc8710dccd54617268" kindref="member">error</ref>;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(r.<ref refid="structDmaReadData_1a96e4e54d353a6617a184abb041910e22" kindref="member">ret</ref>);</highlight></codeline>
<codeline lineno="210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Receive<sp/>Frame,<sp/>access<sp/>memory<sp/>mapped<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>receive<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214" refid="DmaDriver_8h_1aa38b4096d85e7daeb03be1a1f10722ca" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ssize_t<sp/><ref refid="DmaDriver_8h_1aa38b4096d85e7daeb03be1a1f10722ca" kindref="member">dmaReadIndex</ref>(int32_t<sp/>fd,<sp/>uint32_t<sp/>*<sp/><ref refid="structDmaReadData_1a32d79a66e220cc7f8421c0e045c31f6b" kindref="member">index</ref>,<sp/>uint32_t<sp/>*<sp/><ref refid="structDmaReadData_1a53f11dacc807b6536eae13e72de25ca1" kindref="member">flags</ref>,<sp/>uint32_t<sp/>*<ref refid="structDmaReadData_1a08f2e6ec00655bfc8710dccd54617268" kindref="member">error</ref>,<sp/>uint32_t<sp/>*<sp/><ref refid="structDmaReadData_1a980d88a39f4d557a88ed0c3466344d0b" kindref="member">dest</ref>)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structDmaReadData" kindref="compound">DmaReadData</ref><sp/>r;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structDmaReadData_1a96e4e54d353a6617a184abb041910e22" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/>memset(&amp;r,0,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structDmaReadData" kindref="compound">DmaReadData</ref>));</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><ref refid="structDmaReadData_1a96e4e54d353a6617a184abb041910e22" kindref="member">ret</ref><sp/>=<sp/>read(fd,&amp;r,</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structDmaReadData" kindref="compound">DmaReadData</ref>));</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="structDmaReadData_1a96e4e54d353a6617a184abb041910e22" kindref="member">ret</ref><sp/>&lt;=<sp/>0<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(<ref refid="structDmaReadData_1a96e4e54d353a6617a184abb041910e22" kindref="member">ret</ref>);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="structDmaReadData_1a980d88a39f4d557a88ed0c3466344d0b" kindref="member">dest</ref><sp/><sp/>!=<sp/>NULL<sp/>)<sp/>*<ref refid="structDmaReadData_1a980d88a39f4d557a88ed0c3466344d0b" kindref="member">dest</ref><sp/><sp/>=<sp/>r.<ref refid="structDmaReadData_1a980d88a39f4d557a88ed0c3466344d0b" kindref="member">dest</ref>;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="structDmaReadData_1a53f11dacc807b6536eae13e72de25ca1" kindref="member">flags</ref><sp/>!=<sp/>NULL<sp/>)<sp/>*<ref refid="structDmaReadData_1a53f11dacc807b6536eae13e72de25ca1" kindref="member">flags</ref><sp/>=<sp/>r.<ref refid="structDmaReadData_1a53f11dacc807b6536eae13e72de25ca1" kindref="member">flags</ref>;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="structDmaReadData_1a08f2e6ec00655bfc8710dccd54617268" kindref="member">error</ref><sp/>!=<sp/>NULL<sp/>)<sp/>*<ref refid="structDmaReadData_1a08f2e6ec00655bfc8710dccd54617268" kindref="member">error</ref><sp/>=<sp/>r.<ref refid="structDmaReadData_1a08f2e6ec00655bfc8710dccd54617268" kindref="member">error</ref>;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/>*<ref refid="structDmaReadData_1a32d79a66e220cc7f8421c0e045c31f6b" kindref="member">index</ref><sp/>=<sp/>r.<ref refid="structDmaReadData_1a32d79a66e220cc7f8421c0e045c31f6b" kindref="member">index</ref>;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(r.<ref refid="structDmaReadData_1a96e4e54d353a6617a184abb041910e22" kindref="member">ret</ref>);</highlight></codeline>
<codeline lineno="230"><highlight class="normal">}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Receive<sp/>Frame,<sp/>access<sp/>memory<sp/>mapped<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>receive<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234" refid="DmaDriver_8h_1a73a6e25f2c2c92a173d6cdc8fb1a8889" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ssize_t<sp/><ref refid="DmaDriver_8h_1a73a6e25f2c2c92a173d6cdc8fb1a8889" kindref="member">dmaReadBulkIndex</ref>(int32_t<sp/>fd,<sp/>uint32_t<sp/>count,<sp/>int32_t<sp/>*<ref refid="structDmaReadData_1a96e4e54d353a6617a184abb041910e22" kindref="member">ret</ref>,<sp/>uint32_t<sp/>*<sp/><ref refid="structDmaReadData_1a32d79a66e220cc7f8421c0e045c31f6b" kindref="member">index</ref>,<sp/>uint32_t<sp/>*<sp/><ref refid="structDmaReadData_1a53f11dacc807b6536eae13e72de25ca1" kindref="member">flags</ref>,<sp/>uint32_t<sp/>*<ref refid="structDmaReadData_1a08f2e6ec00655bfc8710dccd54617268" kindref="member">error</ref>,<sp/>uint32_t<sp/>*<sp/><ref refid="structDmaReadData_1a980d88a39f4d557a88ed0c3466344d0b" kindref="member">dest</ref>)<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structDmaReadData" kindref="compound">DmaReadData</ref><sp/>r[count];</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/>memset(r,0,count<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structDmaReadData" kindref="compound">DmaReadData</ref>));</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/>res<sp/>=<sp/>read(fd,r,count<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structDmaReadData" kindref="compound">DmaReadData</ref>));</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>res;<sp/>++x)<sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="structDmaReadData_1a980d88a39f4d557a88ed0c3466344d0b" kindref="member">dest</ref><sp/><sp/>!=<sp/>NULL<sp/>)<sp/><ref refid="structDmaReadData_1a980d88a39f4d557a88ed0c3466344d0b" kindref="member">dest</ref>[x]<sp/><sp/>=<sp/>r[x].<ref refid="structDmaReadData_1a980d88a39f4d557a88ed0c3466344d0b" kindref="member">dest</ref>;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="structDmaReadData_1a53f11dacc807b6536eae13e72de25ca1" kindref="member">flags</ref><sp/>!=<sp/>NULL<sp/>)<sp/><ref refid="structDmaReadData_1a53f11dacc807b6536eae13e72de25ca1" kindref="member">flags</ref>[x]<sp/>=<sp/>r[x].<ref refid="structDmaReadData_1a53f11dacc807b6536eae13e72de25ca1" kindref="member">flags</ref>;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="structDmaReadData_1a08f2e6ec00655bfc8710dccd54617268" kindref="member">error</ref><sp/>!=<sp/>NULL<sp/>)<sp/><ref refid="structDmaReadData_1a08f2e6ec00655bfc8710dccd54617268" kindref="member">error</ref>[x]<sp/>=<sp/>r[x].<ref refid="structDmaReadData_1a08f2e6ec00655bfc8710dccd54617268" kindref="member">error</ref>;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDmaReadData_1a32d79a66e220cc7f8421c0e045c31f6b" kindref="member">index</ref>[x]<sp/>=<sp/>r[x].<ref refid="structDmaReadData_1a32d79a66e220cc7f8421c0e045c31f6b" kindref="member">index</ref>;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDmaReadData_1a96e4e54d353a6617a184abb041910e22" kindref="member">ret</ref>[x]<sp/><sp/><sp/>=<sp/>r[x].<ref refid="structDmaReadData_1a96e4e54d353a6617a184abb041910e22" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(res);</highlight></codeline>
<codeline lineno="252"><highlight class="normal">}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Post<sp/>Index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256" refid="DmaDriver_8h_1aa8a8f2711417f22fba6e923022376f77" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ssize_t<sp/><ref refid="DmaDriver_8h_1aa8a8f2711417f22fba6e923022376f77" kindref="member">dmaRetIndex</ref>(int32_t<sp/>fd,<sp/>uint32_t<sp/><ref refid="structDmaReadData_1a32d79a66e220cc7f8421c0e045c31f6b" kindref="member">index</ref>)<sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/>uint32_t<sp/>cmd<sp/>=<sp/><ref refid="DmaDriver_8h_1a6900d5b9ad955f0310f3f21fe36f430e" kindref="member">DMA_Ret_Index</ref><sp/>|<sp/>0x10000;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(ioctl(fd,cmd,&amp;<ref refid="structDmaReadData_1a32d79a66e220cc7f8421c0e045c31f6b" kindref="member">index</ref>));</highlight></codeline>
<codeline lineno="260"><highlight class="normal">}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Post<sp/>Index<sp/>List</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263" refid="DmaDriver_8h_1afffccddbaae11c0e1928d5081c40f9cc" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ssize_t<sp/><ref refid="DmaDriver_8h_1afffccddbaae11c0e1928d5081c40f9cc" kindref="member">dmaRetIndexes</ref>(int32_t<sp/>fd,<sp/>uint32_t<sp/>count,<sp/>uint32_t<sp/>*indexes)<sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/>uint32_t<sp/>cmd<sp/>=<sp/><ref refid="DmaDriver_8h_1a6900d5b9ad955f0310f3f21fe36f430e" kindref="member">DMA_Ret_Index</ref><sp/>|<sp/>((count<sp/>&lt;&lt;<sp/>16)<sp/>&amp;<sp/>0xFFFF0000);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(ioctl(fd,cmd,indexes));</highlight></codeline>
<codeline lineno="267"><highlight class="normal">}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Get<sp/>write<sp/>buffer<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270" refid="DmaDriver_8h_1af13134152f22c30d623c0ddeeb9e62d0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="DmaDriver_8h_1af13134152f22c30d623c0ddeeb9e62d0" kindref="member">dmaGetIndex</ref>(int32_t<sp/>fd)<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(ioctl(fd,<ref refid="DmaDriver_8h_1a1800155037eb3bfe74244daed56c3445" kindref="member">DMA_Get_Index</ref>,0));</highlight></codeline>
<codeline lineno="272"><highlight class="normal">}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Get<sp/>read<sp/>ready<sp/>status</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275" refid="DmaDriver_8h_1ad5f5aca8748793542a18c31b9083a083" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ssize_t<sp/><ref refid="DmaDriver_8h_1ad5f5aca8748793542a18c31b9083a083" kindref="member">dmaReadReady</ref>(int32_t<sp/>fd)<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(ioctl(fd,<ref refid="DmaDriver_8h_1afc04a4cba59140f5b74dd916702b4c72" kindref="member">DMA_Read_Ready</ref>,0));</highlight></codeline>
<codeline lineno="277"><highlight class="normal">}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="comment">//<sp/>get<sp/>rx<sp/>buffer<sp/>count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280" refid="DmaDriver_8h_1a9c4708a832dc002df969b27681b605dd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ssize_t<sp/><ref refid="DmaDriver_8h_1a9c4708a832dc002df969b27681b605dd" kindref="member">dmaGetRxBuffCount</ref>(int32_t<sp/>fd)<sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(ioctl(fd,<ref refid="DmaDriver_8h_1a3ea544e208d9cd7789c80434f5cc7e4e" kindref="member">DMA_Get_RxBuff_Count</ref>,0));</highlight></codeline>
<codeline lineno="282"><highlight class="normal">}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="comment">//<sp/>get<sp/>tx<sp/>buffer<sp/>count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285" refid="DmaDriver_8h_1a2d2139564df199d02420e9bbc5285b80" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ssize_t<sp/><ref refid="DmaDriver_8h_1a2d2139564df199d02420e9bbc5285b80" kindref="member">dmaGetTxBuffCount</ref>(int32_t<sp/>fd)<sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(ioctl(fd,<ref refid="DmaDriver_8h_1a5febeaaff4b0aae4ae9da2acb3306559" kindref="member">DMA_Get_TxBuff_Count</ref>,0));</highlight></codeline>
<codeline lineno="287"><highlight class="normal">}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="comment">//<sp/>get<sp/>buffer<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290" refid="DmaDriver_8h_1a9aff3927628e140feb6201a2c326fc75" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ssize_t<sp/><ref refid="DmaDriver_8h_1a9aff3927628e140feb6201a2c326fc75" kindref="member">dmaGetBuffSize</ref>(int32_t<sp/>fd)<sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(ioctl(fd,<ref refid="DmaDriver_8h_1a202ad0447ecaa6358e239020ada1c471" kindref="member">DMA_Get_Buff_Size</ref>,0));</highlight></codeline>
<codeline lineno="292"><highlight class="normal">}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Return<sp/>user<sp/>space<sp/>mapping<sp/>to<sp/>dma<sp/>buffers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295" refid="DmaDriver_8h_1a6cbfd4cc7df19fbc2cdc238dfa6b1b73" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**<sp/><ref refid="DmaDriver_8h_1a6cbfd4cc7df19fbc2cdc238dfa6b1b73" kindref="member">dmaMapDma</ref>(int32_t<sp/>fd,<sp/>uint32_t<sp/>*count,<sp/>uint32_t<sp/>*<ref refid="structDmaReadData_1a6251f657463df6bd6c6a17842d76ce6d" kindref="member">size</ref>)<sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/>temp;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**<sp/><sp/><ref refid="structDmaReadData_1a96e4e54d353a6617a184abb041910e22" kindref="member">ret</ref>;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/>uint32_t<sp/>bCount;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/>uint32_t<sp/>gCount;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/>uint32_t<sp/>bSize;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/>off_t<sp/><sp/><sp/><sp/>offset;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/>bSize<sp/><sp/>=<sp/>ioctl(fd,<ref refid="DmaDriver_8h_1a202ad0447ecaa6358e239020ada1c471" kindref="member">DMA_Get_Buff_Size</ref>,0);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/>bCount<sp/>=<sp/>ioctl(fd,<ref refid="DmaDriver_8h_1a2f3ab68e37a66a8bfbee511d722bc833" kindref="member">DMA_Get_Buff_Count</ref>,0);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>count<sp/>!=<sp/>NULL<sp/>)<sp/>*count<sp/>=<sp/>bCount;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="structDmaReadData_1a6251f657463df6bd6c6a17842d76ce6d" kindref="member">size</ref><sp/><sp/>!=<sp/>NULL<sp/>)<sp/>*<ref refid="structDmaReadData_1a6251f657463df6bd6c6a17842d76ce6d" kindref="member">size</ref><sp/><sp/>=<sp/>bSize;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(<ref refid="structDmaReadData_1a96e4e54d353a6617a184abb041910e22" kindref="member">ret</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>*<sp/>bCount))<sp/>==<sp/>0<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(NULL);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Attempt<sp/>to<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/>gCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>gCount<sp/>&lt;<sp/>bCount<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>offset<sp/>=<sp/>(off_t)bSize<sp/>*<sp/>(off_t)gCount;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(temp<sp/>=<sp/>mmap<sp/>(0,<sp/>bSize,<sp/>PROT_READ<sp/>|<sp/>PROT_WRITE,<sp/>MAP_SHARED,<sp/>fd,<sp/>offset))<sp/>==<sp/>MAP_FAILED)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDmaReadData_1a96e4e54d353a6617a184abb041910e22" kindref="member">ret</ref>[gCount++]<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Map<sp/>failed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>gCount<sp/>!=<sp/>bCount<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>gCount<sp/>!=<sp/>0<sp/>)<sp/>munmap(<ref refid="structDmaReadData_1a96e4e54d353a6617a184abb041910e22" kindref="member">ret</ref>[--gCount],bSize);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(<ref refid="structDmaReadData_1a96e4e54d353a6617a184abb041910e22" kindref="member">ret</ref>);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structDmaReadData_1a96e4e54d353a6617a184abb041910e22" kindref="member">ret</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(<ref refid="structDmaReadData_1a96e4e54d353a6617a184abb041910e22" kindref="member">ret</ref>);</highlight></codeline>
<codeline lineno="327"><highlight class="normal">}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Free<sp/>space<sp/>mapping<sp/>to<sp/>dma<sp/>buffers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330" refid="DmaDriver_8h_1adcf3ea759d1130e72bb621c08cca2629" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ssize_t<sp/><ref refid="DmaDriver_8h_1adcf3ea759d1130e72bb621c08cca2629" kindref="member">dmaUnMapDma</ref>(int32_t<sp/>fd,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**<sp/>buffer)<sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/>uint32_t<sp/><sp/>bCount;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/>uint32_t<sp/><sp/>bSize;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/>uint32_t<sp/><sp/>x;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/>bCount<sp/>=<sp/>ioctl(fd,<ref refid="DmaDriver_8h_1a2f3ab68e37a66a8bfbee511d722bc833" kindref="member">DMA_Get_Buff_Count</ref>,0);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/>bSize<sp/><sp/>=<sp/>ioctl(fd,<ref refid="DmaDriver_8h_1a202ad0447ecaa6358e239020ada1c471" kindref="member">DMA_Get_Buff_Size</ref>,0);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x=0;<sp/>x<sp/>&lt;<sp/>bCount;<sp/>x++)<sp/>munmap<sp/>(buffer[x],<sp/>bSize);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/>free(buffer);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="342"><highlight class="normal">}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set<sp/>debug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345" refid="DmaDriver_8h_1abdb2590fb0ec582c6697f14d1c9e01e4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ssize_t<sp/><ref refid="DmaDriver_8h_1abdb2590fb0ec582c6697f14d1c9e01e4" kindref="member">dmaSetDebug</ref>(int32_t<sp/>fd,<sp/>uint32_t<sp/>level)<sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(ioctl(fd,<ref refid="DmaDriver_8h_1a17f0d17cbf276724514a21bbe4b7ac85" kindref="member">DMA_Set_Debug</ref>,level));</highlight></codeline>
<codeline lineno="347"><highlight class="normal">}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Assign<sp/>interrupt<sp/>handler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350" refid="DmaDriver_8h_1abe985c96e62c9e3f7cbaea2e2fffe588" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="DmaDriver_8h_1abe985c96e62c9e3f7cbaea2e2fffe588" kindref="member">dmaAssignHandler</ref><sp/>(int32_t<sp/>fd,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*handler)(int32_t))<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sigaction<sp/>act;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/>int32_t<sp/>oflags;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/>act.sa_handler<sp/>=<sp/>handler;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/>sigemptyset(&amp;act.sa_mask);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/>act.sa_flags<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/>sigaction(SIGIO,<sp/>&amp;act,<sp/>NULL);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/>fcntl(fd,<sp/>F_SETOWN,<sp/>getpid());</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/>oflags<sp/>=<sp/>fcntl(fd,<sp/>F_GETFL);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/>fcntl(fd,<sp/>F_SETFL,<sp/>oflags<sp/>|<sp/>FASYNC);</highlight></codeline>
<codeline lineno="362"><highlight class="normal">}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="comment">//<sp/>set<sp/>mask</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365" refid="DmaDriver_8h_1a00050427095a8a97a16628167a9b8411" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ssize_t<sp/><ref refid="DmaDriver_8h_1a00050427095a8a97a16628167a9b8411" kindref="member">dmaSetMask</ref>(int32_t<sp/>fd,<sp/>uint32_t<sp/>mask)<sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(ioctl(fd,<ref refid="DmaDriver_8h_1a68b983281ede8a5c0163e951213013e6" kindref="member">DMA_Set_Mask</ref>,mask));</highlight></codeline>
<codeline lineno="367"><highlight class="normal">}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Init<sp/>mask<sp/>byte<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370" refid="DmaDriver_8h_1a6792bef0631a653d5a1799d05e55e7f8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="DmaDriver_8h_1a6792bef0631a653d5a1799d05e55e7f8" kindref="member">dmaInitMaskBytes</ref>(uint8_t<sp/>*<sp/>mask)<sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/>memset(mask,0,<ref refid="DmaDriver_8h_1a784881c5ca3eb26228dcaf3a3acddbc8" kindref="member">DMA_MASK_SIZE</ref>);</highlight></codeline>
<codeline lineno="372"><highlight class="normal">}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Add<sp/>destination<sp/>to<sp/>mask<sp/>byte<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375" refid="DmaDriver_8h_1a6b90f7249599dd58daa55b03a828f9f9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="DmaDriver_8h_1a6b90f7249599dd58daa55b03a828f9f9" kindref="member">dmaAddMaskBytes</ref>(uint8_t<sp/>*<sp/>mask,<sp/>uint32_t<sp/>dest)<sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/>uint32_t<sp/>byte;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/>uint32_t<sp/>bit;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>dest<sp/>&lt;<sp/>8*(<ref refid="DmaDriver_8h_1a784881c5ca3eb26228dcaf3a3acddbc8" kindref="member">DMA_MASK_SIZE</ref>))<sp/>{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">byte</highlight><highlight class="normal"><sp/>=<sp/>dest<sp/>/<sp/>8;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bit<sp/><sp/>=<sp/>dest<sp/>%<sp/>8;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mask[byte]<sp/>+=<sp/>(1<sp/>&lt;&lt;<sp/>bit);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="384"><highlight class="normal">}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="comment">//<sp/>set<sp/>mask<sp/>byte<sp/>array<sp/>to<sp/>driver</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387" refid="DmaDriver_8h_1a7d2f1097e838652d7a6a50435706fb80" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ssize_t<sp/><ref refid="DmaDriver_8h_1a7d2f1097e838652d7a6a50435706fb80" kindref="member">dmaSetMaskBytes</ref>(int32_t<sp/>fd,<sp/>uint8_t<sp/>*<sp/>mask)<sp/>{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(ioctl(fd,<ref refid="DmaDriver_8h_1a72697e08d6a20eec058566152b1a70af" kindref="member">DMA_Set_MaskBytes</ref>,mask));</highlight></codeline>
<codeline lineno="389"><highlight class="normal">}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Check<sp/>API<sp/>version,<sp/>return<sp/>negative<sp/>on<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392" refid="DmaDriver_8h_1ad91e3706780af90a1d36dcea618cbb4c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ssize_t<sp/><ref refid="DmaDriver_8h_1ad91e3706780af90a1d36dcea618cbb4c" kindref="member">dmaCheckVersion</ref>(int32_t<sp/>fd)<sp/>{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/>int32_t<sp/>version;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/>version<sp/>=<sp/>ioctl(fd,<ref refid="DmaDriver_8h_1a888e03df403e5bb541bc29b0ee896803" kindref="member">DMA_Get_Version</ref>);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">((version<sp/>==<sp/><ref refid="DmaDriver_8h_1ac016efd4c92730f338793aafe70c4f33" kindref="member">DMA_VERSION</ref>)?-0:-1);</highlight></codeline>
<codeline lineno="396"><highlight class="normal">}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Write<sp/>Register</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399" refid="DmaDriver_8h_1a5d4d77ca9ee0862c4365c50c10bfc5bd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ssize_t<sp/><ref refid="DmaDriver_8h_1a5d4d77ca9ee0862c4365c50c10bfc5bd" kindref="member">dmaWriteRegister</ref>(int32_t<sp/>fd,<sp/>uint64_t<sp/>address,<sp/>uint32_t<sp/>data)<sp/>{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structDmaRegisterData" kindref="compound">DmaRegisterData</ref><sp/>reg;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/>reg.<ref refid="structDmaRegisterData_1a20a8692e7ab6f5b5fdeb8f09e58c5dab" kindref="member">address</ref><sp/>=<sp/><ref refid="structDmaRegisterData_1a20a8692e7ab6f5b5fdeb8f09e58c5dab" kindref="member">address</ref>;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/>reg.<ref refid="structDmaRegisterData_1a4bb51c7f258e9e30b20a04ef04a9870a" kindref="member">data</ref><sp/><sp/><sp/><sp/>=<sp/><ref refid="structDmaRegisterData_1a4bb51c7f258e9e30b20a04ef04a9870a" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(ioctl(fd,<ref refid="DmaDriver_8h_1a380ec8c28855d92b765980690d270c5f" kindref="member">DMA_Write_Register</ref>,&amp;reg));</highlight></codeline>
<codeline lineno="405"><highlight class="normal">}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Read<sp/>Register</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408" refid="DmaDriver_8h_1a53607a4b463d807f21c99c325cd9c10b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ssize_t<sp/><ref refid="DmaDriver_8h_1a53607a4b463d807f21c99c325cd9c10b" kindref="member">dmaReadRegister</ref>(int32_t<sp/>fd,<sp/>uint64_t<sp/><ref refid="structDmaRegisterData_1a20a8692e7ab6f5b5fdeb8f09e58c5dab" kindref="member">address</ref>,<sp/>uint32_t<sp/>*<ref refid="structDmaRegisterData_1a4bb51c7f258e9e30b20a04ef04a9870a" kindref="member">data</ref>)<sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structDmaRegisterData" kindref="compound">DmaRegisterData</ref><sp/>reg;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/>ssize_t<sp/>res;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/>reg.<ref refid="structDmaRegisterData_1a20a8692e7ab6f5b5fdeb8f09e58c5dab" kindref="member">address</ref><sp/>=<sp/><ref refid="structDmaRegisterData_1a20a8692e7ab6f5b5fdeb8f09e58c5dab" kindref="member">address</ref>;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/>reg.<ref refid="structDmaRegisterData_1a4bb51c7f258e9e30b20a04ef04a9870a" kindref="member">data</ref><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/>res<sp/>=<sp/>ioctl(fd,<ref refid="DmaDriver_8h_1affc5ed3bd37dc3c9ca27bfba9dd134cf" kindref="member">DMA_Read_Register</ref>,&amp;reg);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="structDmaRegisterData_1a4bb51c7f258e9e30b20a04ef04a9870a" kindref="member">data</ref><sp/>!=<sp/>NULL<sp/>)<sp/>*<ref refid="structDmaRegisterData_1a4bb51c7f258e9e30b20a04ef04a9870a" kindref="member">data</ref><sp/>=<sp/>reg.<ref refid="structDmaRegisterData_1a4bb51c7f258e9e30b20a04ef04a9870a" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(res);</highlight></codeline>
<codeline lineno="419"><highlight class="normal">}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Return<sp/>user<sp/>space<sp/>mapping<sp/>to<sp/>a<sp/>relative<sp/>register<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422" refid="DmaDriver_8h_1ac28c7b53f7ba2a23704cecb0938b700b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><ref refid="DmaDriver_8h_1ac28c7b53f7ba2a23704cecb0938b700b" kindref="member">dmaMapRegister</ref>(int32_t<sp/>fd,<sp/>off_t<sp/>offset,<sp/>uint32_t<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/>uint32_t<sp/>bCount;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/>uint32_t<sp/>bSize;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/>off_t<sp/><sp/><sp/><sp/>intOffset;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/>bSize<sp/><sp/>=<sp/>ioctl(fd,<ref refid="DmaDriver_8h_1a202ad0447ecaa6358e239020ada1c471" kindref="member">DMA_Get_Buff_Size</ref>,0);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/>bCount<sp/>=<sp/>ioctl(fd,<ref refid="DmaDriver_8h_1a2f3ab68e37a66a8bfbee511d722bc833" kindref="member">DMA_Get_Buff_Count</ref>,0);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/>intOffset<sp/>=<sp/>(bSize<sp/>*<sp/>bCount)<sp/>+<sp/>offset;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Attempt<sp/>to<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(mmap<sp/>(0,<sp/>size,<sp/>PROT_READ<sp/>|<sp/>PROT_WRITE,<sp/>MAP_SHARED,<sp/>fd,<sp/>intOffset));</highlight></codeline>
<codeline lineno="434"><highlight class="normal">}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Free<sp/>space<sp/>mapping<sp/>to<sp/>dma<sp/>buffers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437" refid="DmaDriver_8h_1a757fc122a413915c87e9e38aa21b5369" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ssize_t<sp/><ref refid="DmaDriver_8h_1a757fc122a413915c87e9e38aa21b5369" kindref="member">dmaUnMapRegister</ref>(int32_t<sp/>fd,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr,<sp/>uint32_t<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/>munmap<sp/>(ptr,<sp/>size);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="440"><highlight class="normal">}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/hardware/drivers/DmaDriver.h"/>
  </compounddef>
</doxygen>
