<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classCRC" kind="class" language="C++" prot="public">
    <compoundname>CRC</compoundname>
    <includes refid="CRC_8h" local="no">CRC.h</includes>
    <innerclass refid="structCRC_1_1Parameters" prot="public">CRC::Parameters</innerclass>
    <innerclass refid="structCRC_1_1Table" prot="public">CRC::Table</innerclass>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classCRC_1ae37d010c92c3afcf0da63834afc51469" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CRCType</type>
          </param>
          <param>
            <type><ref refid="CRC_8h_1add273674b22f031b158220eeb560c7a0" kindref="member">crcpp_uint16</ref></type>
            <declname>CRCWidth</declname>
            <defname>CRCWidth</defname>
          </param>
        </templateparamlist>
        <type>CRCType</type>
        <definition>CRCType CRC::Calculate</definition>
        <argsstring>(const void *data, crcpp_size size, const Parameters&lt; CRCType, CRCWidth &gt; &amp;parameters)</argsstring>
        <name>Calculate</name>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="CRC_8h_1af44cfa9e71356f05c42b363cf04ea9a6" kindref="member">crcpp_size</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type>const <ref refid="structCRC_1_1Parameters" kindref="compound">Parameters</ref>&lt; CRCType, CRCWidth &gt; &amp;</type>
          <declname>parameters</declname>
        </param>
        <briefdescription>
<para>Computes a <ref refid="classCRC" kindref="compound">CRC</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data over which <ref refid="classCRC" kindref="compound">CRC</ref> will be computed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">parameters</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classCRC" kindref="compound">CRC</ref> parameters </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>CRCType</parametername>
</parameternamelist>
<parameterdescription>
<para>Integer type for storing the <ref refid="classCRC" kindref="compound">CRC</ref> result </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>CRCWidth</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bits in the <ref refid="classCRC" kindref="compound">CRC</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classCRC" kindref="compound">CRC</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/protocols/packetizer/CRC.h" line="194" column="20" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/protocols/packetizer/CRC.h" bodystart="436" bodyend="443"/>
      </memberdef>
      <memberdef kind="function" id="classCRC_1a49d563e8c4cd6d1cd8fe6991bc7feaa0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CRCType</type>
          </param>
          <param>
            <type><ref refid="CRC_8h_1add273674b22f031b158220eeb560c7a0" kindref="member">crcpp_uint16</ref></type>
            <declname>CRCWidth</declname>
            <defname>CRCWidth</defname>
          </param>
        </templateparamlist>
        <type>CRCType</type>
        <definition>CRCType CRC::Calculate</definition>
        <argsstring>(const void *data, crcpp_size size, const Parameters&lt; CRCType, CRCWidth &gt; &amp;parameters, CRCType crc)</argsstring>
        <name>Calculate</name>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="CRC_8h_1af44cfa9e71356f05c42b363cf04ea9a6" kindref="member">crcpp_size</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type>const <ref refid="structCRC_1_1Parameters" kindref="compound">Parameters</ref>&lt; CRCType, CRCWidth &gt; &amp;</type>
          <declname>parameters</declname>
        </param>
        <param>
          <type>CRCType</type>
          <declname>crc</declname>
        </param>
        <briefdescription>
<para>Appends additional data to a previous <ref refid="classCRC" kindref="compound">CRC</ref> calculation. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function can be used to compute multi-part CRCs. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data over which <ref refid="classCRC" kindref="compound">CRC</ref> will be computed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">parameters</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classCRC" kindref="compound">CRC</ref> parameters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">crc</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classCRC" kindref="compound">CRC</ref> from a previous calculation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>CRCType</parametername>
</parameternamelist>
<parameterdescription>
<para>Integer type for storing the <ref refid="classCRC" kindref="compound">CRC</ref> result </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>CRCWidth</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bits in the <ref refid="classCRC" kindref="compound">CRC</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classCRC" kindref="compound">CRC</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/protocols/packetizer/CRC.h" line="197" column="20" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/protocols/packetizer/CRC.h" bodystart="456" bodyend="465"/>
      </memberdef>
      <memberdef kind="function" id="classCRC_1a82d8aa1552599d285a883c55f45dd59e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CRCType</type>
          </param>
          <param>
            <type><ref refid="CRC_8h_1add273674b22f031b158220eeb560c7a0" kindref="member">crcpp_uint16</ref></type>
            <declname>CRCWidth</declname>
            <defname>CRCWidth</defname>
          </param>
        </templateparamlist>
        <type>CRCType</type>
        <definition>CRCType CRC::Calculate</definition>
        <argsstring>(const void *data, crcpp_size size, const Table&lt; CRCType, CRCWidth &gt; &amp;lookupTable)</argsstring>
        <name>Calculate</name>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="CRC_8h_1af44cfa9e71356f05c42b363cf04ea9a6" kindref="member">crcpp_size</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type>const <ref refid="structCRC_1_1Table" kindref="compound">Table</ref>&lt; CRCType, CRCWidth &gt; &amp;</type>
          <declname>lookupTable</declname>
        </param>
        <briefdescription>
<para>Computes a <ref refid="classCRC" kindref="compound">CRC</ref> via a lookup table. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data over which <ref refid="classCRC" kindref="compound">CRC</ref> will be computed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">lookupTable</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classCRC" kindref="compound">CRC</ref> lookup table </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>CRCType</parametername>
</parameternamelist>
<parameterdescription>
<para>Integer type for storing the <ref refid="classCRC" kindref="compound">CRC</ref> result </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>CRCWidth</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bits in the <ref refid="classCRC" kindref="compound">CRC</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classCRC" kindref="compound">CRC</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/protocols/packetizer/CRC.h" line="200" column="20" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/protocols/packetizer/CRC.h" bodystart="477" bodyend="486"/>
      </memberdef>
      <memberdef kind="function" id="classCRC_1a89f8bd5de26eaf60dda955ac4e56fd57" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CRCType</type>
          </param>
          <param>
            <type><ref refid="CRC_8h_1add273674b22f031b158220eeb560c7a0" kindref="member">crcpp_uint16</ref></type>
            <declname>CRCWidth</declname>
            <defname>CRCWidth</defname>
          </param>
        </templateparamlist>
        <type>CRCType</type>
        <definition>CRCType CRC::Calculate</definition>
        <argsstring>(const void *data, crcpp_size size, const Table&lt; CRCType, CRCWidth &gt; &amp;lookupTable, CRCType crc)</argsstring>
        <name>Calculate</name>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="CRC_8h_1af44cfa9e71356f05c42b363cf04ea9a6" kindref="member">crcpp_size</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type>const <ref refid="structCRC_1_1Table" kindref="compound">Table</ref>&lt; CRCType, CRCWidth &gt; &amp;</type>
          <declname>lookupTable</declname>
        </param>
        <param>
          <type>CRCType</type>
          <declname>crc</declname>
        </param>
        <briefdescription>
<para>Appends additional data to a previous <ref refid="classCRC" kindref="compound">CRC</ref> calculation using a lookup table. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function can be used to compute multi-part CRCs. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data over which <ref refid="classCRC" kindref="compound">CRC</ref> will be computed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">lookupTable</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classCRC" kindref="compound">CRC</ref> lookup table </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">crc</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classCRC" kindref="compound">CRC</ref> from a previous calculation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>CRCType</parametername>
</parameternamelist>
<parameterdescription>
<para>Integer type for storing the <ref refid="classCRC" kindref="compound">CRC</ref> result </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>CRCWidth</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bits in the <ref refid="classCRC" kindref="compound">CRC</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classCRC" kindref="compound">CRC</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/protocols/packetizer/CRC.h" line="203" column="20" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/protocols/packetizer/CRC.h" bodystart="500" bodyend="511"/>
      </memberdef>
      <memberdef kind="function" id="classCRC_1a50f1e00559defde552c58ebcc741257b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structCRC_1_1Parameters" kindref="compound">Parameters</ref>&lt; <ref refid="CRC_8h_1a28cd0a17324a479874c3bdd5387d6b04" kindref="member">crcpp_uint8</ref>, 8 &gt; &amp;</type>
        <definition>const CRC::Parameters&lt; crcpp_uint8, 8 &gt; &amp; CRC::CRC_8</definition>
        <argsstring>()</argsstring>
        <name>CRC_8</name>
        <briefdescription>
<para>Returns a set of parameters for CRC-8 SMBus. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The parameters are static and are delayed-constructed to reduce memory footprint. </para>
</simplesect>
<simplesect kind="note"><para>CRC-8 SMBus has the following parameters and check value:<itemizedlist>
<listitem><para>polynomial = 0x07</para>
</listitem><listitem><para>initial value = 0x00</para>
</listitem><listitem><para>final XOR = 0x00</para>
</listitem><listitem><para>reflect input = false</para>
</listitem><listitem><para>reflect output = false</para>
</listitem><listitem><para>check value = 0xF4 </para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="return"><para>CRC-8 SMBus parameters </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/protocols/packetizer/CRC.h" line="217" column="30" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/protocols/packetizer/CRC.h" bodystart="940" bodyend="944"/>
      </memberdef>
      <memberdef kind="function" id="classCRC_1aea3087ea6719e8eba36d6fcea3720a82" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structCRC_1_1Parameters" kindref="compound">Parameters</ref>&lt; <ref refid="CRC_8h_1add273674b22f031b158220eeb560c7a0" kindref="member">crcpp_uint16</ref>, 16 &gt; &amp;</type>
        <definition>const CRC::Parameters&lt; crcpp_uint16, 16 &gt; &amp; CRC::CRC_16_ARC</definition>
        <argsstring>()</argsstring>
        <name>CRC_16_ARC</name>
        <briefdescription>
<para>Returns a set of parameters for CRC-16 ARC (aka CRC-16 IBM, CRC-16 LHA). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The parameters are static and are delayed-constructed to reduce memory footprint. </para>
</simplesect>
<simplesect kind="note"><para>CRC-16 ARC has the following parameters and check value:<itemizedlist>
<listitem><para>polynomial = 0x8005</para>
</listitem><listitem><para>initial value = 0x0000</para>
</listitem><listitem><para>final XOR = 0x0000</para>
</listitem><listitem><para>reflect input = true</para>
</listitem><listitem><para>reflect output = true</para>
</listitem><listitem><para>check value = 0xBB3D </para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="return"><para>CRC-16 ARC parameters </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/protocols/packetizer/CRC.h" line="232" column="30" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/protocols/packetizer/CRC.h" bodystart="1176" bodyend="1180"/>
      </memberdef>
      <memberdef kind="function" id="classCRC_1a7615784a91ab254f91583cddf8c0e28d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structCRC_1_1Parameters" kindref="compound">Parameters</ref>&lt; <ref refid="CRC_8h_1add273674b22f031b158220eeb560c7a0" kindref="member">crcpp_uint16</ref>, 16 &gt; &amp;</type>
        <definition>const CRC::Parameters&lt; crcpp_uint16, 16 &gt; &amp; CRC::CRC_16_BUYPASS</definition>
        <argsstring>()</argsstring>
        <name>CRC_16_BUYPASS</name>
        <briefdescription>
<para>Returns a set of parameters for CRC-16 BUYPASS (aka CRC-16 VERIFONE, CRC-16 UMTS). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The parameters are static and are delayed-constructed to reduce memory footprint. </para>
</simplesect>
<simplesect kind="note"><para>CRC-16 BUYPASS has the following parameters and check value:<itemizedlist>
<listitem><para>polynomial = 0x8005</para>
</listitem><listitem><para>initial value = 0x0000</para>
</listitem><listitem><para>final XOR = 0x0000</para>
</listitem><listitem><para>reflect input = false</para>
</listitem><listitem><para>reflect output = false</para>
</listitem><listitem><para>check value = 0xFEE8 </para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="return"><para>CRC-16 BUYPASS parameters </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/protocols/packetizer/CRC.h" line="233" column="30" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/protocols/packetizer/CRC.h" bodystart="1194" bodyend="1198"/>
      </memberdef>
      <memberdef kind="function" id="classCRC_1accde5e695e1eef5e7be2df81d5f37e83" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structCRC_1_1Parameters" kindref="compound">Parameters</ref>&lt; <ref refid="CRC_8h_1add273674b22f031b158220eeb560c7a0" kindref="member">crcpp_uint16</ref>, 16 &gt; &amp;</type>
        <definition>const CRC::Parameters&lt; crcpp_uint16, 16 &gt; &amp; CRC::CRC_16_CCITTFALSE</definition>
        <argsstring>()</argsstring>
        <name>CRC_16_CCITTFALSE</name>
        <briefdescription>
<para>Returns a set of parameters for CRC-16 CCITT FALSE. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The parameters are static and are delayed-constructed to reduce memory footprint. </para>
</simplesect>
<simplesect kind="note"><para>CRC-16 CCITT FALSE has the following parameters and check value:<itemizedlist>
<listitem><para>polynomial = 0x1021</para>
</listitem><listitem><para>initial value = 0xFFFF</para>
</listitem><listitem><para>final XOR = 0x0000</para>
</listitem><listitem><para>reflect input = false</para>
</listitem><listitem><para>reflect output = false</para>
</listitem><listitem><para>check value = 0x29B1 </para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="return"><para>CRC-16 CCITT FALSE parameters </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/protocols/packetizer/CRC.h" line="234" column="30" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/protocols/packetizer/CRC.h" bodystart="1212" bodyend="1216"/>
      </memberdef>
      <memberdef kind="function" id="classCRC_1aaf15ad266e319eb2d87d4f7ddbddef07" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structCRC_1_1Parameters" kindref="compound">Parameters</ref>&lt; <ref refid="CRC_8h_1add273674b22f031b158220eeb560c7a0" kindref="member">crcpp_uint16</ref>, 16 &gt; &amp;</type>
        <definition>const CRC::Parameters&lt; crcpp_uint16, 16 &gt; &amp; CRC::CRC_16_GENIBUS</definition>
        <argsstring>()</argsstring>
        <name>CRC_16_GENIBUS</name>
        <briefdescription>
<para>Returns a set of parameters for CRC-16 GENIBUS (aka CRC-16 EPC, CRC-16 I-CODE, CRC-16 DARC). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The parameters are static and are delayed-constructed to reduce memory footprint. </para>
</simplesect>
<simplesect kind="note"><para>CRC-16 GENIBUS has the following parameters and check value:<itemizedlist>
<listitem><para>polynomial = 0x1021</para>
</listitem><listitem><para>initial value = 0xFFFF</para>
</listitem><listitem><para>final XOR = 0xFFFF</para>
</listitem><listitem><para>reflect input = false</para>
</listitem><listitem><para>reflect output = false</para>
</listitem><listitem><para>check value = 0xD64E </para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="return"><para>CRC-16 GENIBUS parameters </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/protocols/packetizer/CRC.h" line="241" column="30" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/protocols/packetizer/CRC.h" bodystart="1304" bodyend="1308"/>
      </memberdef>
      <memberdef kind="function" id="classCRC_1a95f0f45a06b94e0cd5b92c9e550bba8a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structCRC_1_1Parameters" kindref="compound">Parameters</ref>&lt; <ref refid="CRC_8h_1add273674b22f031b158220eeb560c7a0" kindref="member">crcpp_uint16</ref>, 16 &gt; &amp;</type>
        <definition>const CRC::Parameters&lt; crcpp_uint16, 16 &gt; &amp; CRC::CRC_16_KERMIT</definition>
        <argsstring>()</argsstring>
        <name>CRC_16_KERMIT</name>
        <briefdescription>
<para>Returns a set of parameters for CRC-16 KERMIT (aka CRC-16 CCITT, CRC-16 CCITT-TRUE). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The parameters are static and are delayed-constructed to reduce memory footprint. </para>
</simplesect>
<simplesect kind="note"><para>CRC-16 KERMIT has the following parameters and check value:<itemizedlist>
<listitem><para>polynomial = 0x1021</para>
</listitem><listitem><para>initial value = 0x0000</para>
</listitem><listitem><para>final XOR = 0x0000</para>
</listitem><listitem><para>reflect input = true</para>
</listitem><listitem><para>reflect output = true</para>
</listitem><listitem><para>check value = 0x2189 </para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="return"><para>CRC-16 KERMIT parameters </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/protocols/packetizer/CRC.h" line="242" column="30" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/protocols/packetizer/CRC.h" bodystart="1322" bodyend="1326"/>
      </memberdef>
      <memberdef kind="function" id="classCRC_1ad676bda4d636e1b3a0c8dc2e2075321f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structCRC_1_1Parameters" kindref="compound">Parameters</ref>&lt; <ref refid="CRC_8h_1add273674b22f031b158220eeb560c7a0" kindref="member">crcpp_uint16</ref>, 16 &gt; &amp;</type>
        <definition>const CRC::Parameters&lt; crcpp_uint16, 16 &gt; &amp; CRC::CRC_16_X25</definition>
        <argsstring>()</argsstring>
        <name>CRC_16_X25</name>
        <briefdescription>
<para>Returns a set of parameters for CRC-16 X-25 (aka CRC-16 IBM-SDLC, CRC-16 ISO-HDLC, CRC-16 B). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The parameters are static and are delayed-constructed to reduce memory footprint. </para>
</simplesect>
<simplesect kind="note"><para>CRC-16 X-25 has the following parameters and check value:<itemizedlist>
<listitem><para>polynomial = 0x1021</para>
</listitem><listitem><para>initial value = 0xFFFF</para>
</listitem><listitem><para>final XOR = 0xFFFF</para>
</listitem><listitem><para>reflect input = true</para>
</listitem><listitem><para>reflect output = true</para>
</listitem><listitem><para>check value = 0x906E </para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="return"><para>CRC-16 X-25 parameters </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/protocols/packetizer/CRC.h" line="250" column="30" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/protocols/packetizer/CRC.h" bodystart="1433" bodyend="1437"/>
      </memberdef>
      <memberdef kind="function" id="classCRC_1a3035fe39bcafd47ec184b35617a46452" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structCRC_1_1Parameters" kindref="compound">Parameters</ref>&lt; <ref refid="CRC_8h_1add273674b22f031b158220eeb560c7a0" kindref="member">crcpp_uint16</ref>, 16 &gt; &amp;</type>
        <definition>const CRC::Parameters&lt; crcpp_uint16, 16 &gt; &amp; CRC::CRC_16_XMODEM</definition>
        <argsstring>()</argsstring>
        <name>CRC_16_XMODEM</name>
        <briefdescription>
<para>Returns a set of parameters for CRC-16 XMODEM (aka CRC-16 ZMODEM, CRC-16 ACORN, CRC-16 LTE). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The parameters are static and are delayed-constructed to reduce memory footprint. </para>
</simplesect>
<simplesect kind="note"><para>CRC-16 XMODEM has the following parameters and check value:<itemizedlist>
<listitem><para>polynomial = 0x1021</para>
</listitem><listitem><para>initial value = 0x0000</para>
</listitem><listitem><para>final XOR = 0x0000</para>
</listitem><listitem><para>reflect input = false</para>
</listitem><listitem><para>reflect output = false</para>
</listitem><listitem><para>check value = 0x31C3 </para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="return"><para>CRC-16 XMODEM parameters </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/protocols/packetizer/CRC.h" line="251" column="30" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/protocols/packetizer/CRC.h" bodystart="1451" bodyend="1455"/>
      </memberdef>
      <memberdef kind="function" id="classCRC_1aea541af7b4c36708b8152476e8580053" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structCRC_1_1Parameters" kindref="compound">Parameters</ref>&lt; <ref refid="CRC_8h_1a4469d365469b254f21fb50316e079094" kindref="member">crcpp_uint32</ref>, 32 &gt; &amp;</type>
        <definition>const CRC::Parameters&lt; crcpp_uint32, 32 &gt; &amp; CRC::CRC_32</definition>
        <argsstring>()</argsstring>
        <name>CRC_32</name>
        <briefdescription>
<para>Returns a set of parameters for CRC-32 (aka CRC-32 ADCCP, CRC-32 PKZip). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The parameters are static and are delayed-constructed to reduce memory footprint. </para>
</simplesect>
<simplesect kind="note"><para>CRC-32 has the following parameters and check value:<itemizedlist>
<listitem><para>polynomial = 0x04C11DB7</para>
</listitem><listitem><para>initial value = 0xFFFFFFFF</para>
</listitem><listitem><para>final XOR = 0xFFFFFFFF</para>
</listitem><listitem><para>reflect input = true</para>
</listitem><listitem><para>reflect output = true</para>
</listitem><listitem><para>check value = 0xCBF43926 </para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="return"><para>CRC-32 parameters </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/protocols/packetizer/CRC.h" line="260" column="30" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/protocols/packetizer/CRC.h" bodystart="1579" bodyend="1583"/>
      </memberdef>
      <memberdef kind="function" id="classCRC_1ac503380a8c2b39ae146e17eef16f8f3c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structCRC_1_1Parameters" kindref="compound">Parameters</ref>&lt; <ref refid="CRC_8h_1a4469d365469b254f21fb50316e079094" kindref="member">crcpp_uint32</ref>, 32 &gt; &amp;</type>
        <definition>const CRC::Parameters&lt; crcpp_uint32, 32 &gt; &amp; CRC::CRC_32_BZIP2</definition>
        <argsstring>()</argsstring>
        <name>CRC_32_BZIP2</name>
        <briefdescription>
<para>Returns a set of parameters for CRC-32 BZIP2 (aka CRC-32 AAL5, CRC-32 DECT-B, CRC-32 B-CRC). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The parameters are static and are delayed-constructed to reduce memory footprint. </para>
</simplesect>
<simplesect kind="note"><para>CRC-32 BZIP2 has the following parameters and check value:<itemizedlist>
<listitem><para>polynomial = 0x04C11DB7</para>
</listitem><listitem><para>initial value = 0xFFFFFFFF</para>
</listitem><listitem><para>final XOR = 0xFFFFFFFF</para>
</listitem><listitem><para>reflect input = false</para>
</listitem><listitem><para>reflect output = false</para>
</listitem><listitem><para>check value = 0xFC891918 </para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="return"><para>CRC-32 BZIP2 parameters </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/protocols/packetizer/CRC.h" line="261" column="30" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/protocols/packetizer/CRC.h" bodystart="1597" bodyend="1601"/>
      </memberdef>
      <memberdef kind="function" id="classCRC_1a5648a717486b46badac3693de0c34546" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structCRC_1_1Parameters" kindref="compound">Parameters</ref>&lt; <ref refid="CRC_8h_1a4469d365469b254f21fb50316e079094" kindref="member">crcpp_uint32</ref>, 32 &gt; &amp;</type>
        <definition>const CRC::Parameters&lt; crcpp_uint32, 32 &gt; &amp; CRC::CRC_32_MPEG2</definition>
        <argsstring>()</argsstring>
        <name>CRC_32_MPEG2</name>
        <briefdescription>
<para>Returns a set of parameters for CRC-32 MPEG-2. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The parameters are static and are delayed-constructed to reduce memory footprint. </para>
</simplesect>
<simplesect kind="note"><para>CRC-32 MPEG-2 has the following parameters and check value:<itemizedlist>
<listitem><para>polynomial = 0x04C11DB7</para>
</listitem><listitem><para>initial value = 0xFFFFFFFF</para>
</listitem><listitem><para>final XOR = 0x00000000</para>
</listitem><listitem><para>reflect input = false</para>
</listitem><listitem><para>reflect output = false</para>
</listitem><listitem><para>check value = 0x0376E6E7 </para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="return"><para>CRC-32 MPEG-2 parameters </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/protocols/packetizer/CRC.h" line="265" column="30" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/protocols/packetizer/CRC.h" bodystart="1635" bodyend="1639"/>
      </memberdef>
      <memberdef kind="function" id="classCRC_1ad038d81c003f21d254964566f7f8bc61" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structCRC_1_1Parameters" kindref="compound">Parameters</ref>&lt; <ref refid="CRC_8h_1a4469d365469b254f21fb50316e079094" kindref="member">crcpp_uint32</ref>, 32 &gt; &amp;</type>
        <definition>const CRC::Parameters&lt; crcpp_uint32, 32 &gt; &amp; CRC::CRC_32_POSIX</definition>
        <argsstring>()</argsstring>
        <name>CRC_32_POSIX</name>
        <briefdescription>
<para>Returns a set of parameters for CRC-32 POSIX. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The parameters are static and are delayed-constructed to reduce memory footprint. </para>
</simplesect>
<simplesect kind="note"><para>CRC-32 POSIX has the following parameters and check value:<itemizedlist>
<listitem><para>polynomial = 0x04C11DB7</para>
</listitem><listitem><para>initial value = 0x00000000</para>
</listitem><listitem><para>final XOR = 0xFFFFFFFF</para>
</listitem><listitem><para>reflect input = false</para>
</listitem><listitem><para>reflect output = false</para>
</listitem><listitem><para>check value = 0x765E7680 </para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="return"><para>CRC-32 POSIX parameters </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/protocols/packetizer/CRC.h" line="266" column="30" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/protocols/packetizer/CRC.h" bodystart="1653" bodyend="1657"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classCRC_1ad843a3ac8e4bc04ddd263dc493a43015" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CRC::CRC</definition>
        <argsstring>()</argsstring>
        <name>CRC</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/protocols/packetizer/CRC.h" line="283" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classCRC_1a25faf1efb06001cb1cad810d55e71a58" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CRC::CRC</definition>
        <argsstring>(const CRC &amp;other)</argsstring>
        <name>CRC</name>
        <param>
          <type>const <ref refid="classCRC" kindref="compound">CRC</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/protocols/packetizer/CRC.h" line="284" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classCRC_1a48051d8f4dc907665ba7307d8d5c1318" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classCRC" kindref="compound">CRC</ref> &amp;</type>
        <definition>CRC&amp; CRC::operator=</definition>
        <argsstring>(const CRC &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classCRC" kindref="compound">CRC</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/protocols/packetizer/CRC.h" line="285" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classCRC_1ab508d95b45054e2471eb4a16a9458208" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IntegerType</type>
          </param>
        </templateparamlist>
        <type>IntegerType</type>
        <definition>IntegerType CRC::Reflect</definition>
        <argsstring>(IntegerType value, crcpp_uint16 numBits)</argsstring>
        <name>Reflect</name>
        <param>
          <type>IntegerType</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="CRC_8h_1add273674b22f031b158220eeb560c7a0" kindref="member">crcpp_uint16</ref></type>
          <declname>numBits</declname>
        </param>
        <briefdescription>
<para>Reflects (i.e. reverses the bits within) an integer value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to reflect </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">numBits</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bits in the integer which will be reflected </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>IntegerType</parametername>
</parameternamelist>
<parameterdescription>
<para>Integer type of the value being reflected </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reflected value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/protocols/packetizer/CRC.h" line="289" column="24" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/protocols/packetizer/CRC.h" bodystart="521" bodyend="532"/>
      </memberdef>
      <memberdef kind="function" id="classCRC_1af3247bcac33c4422cbbd97d0eddb1fe6" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CRCType</type>
          </param>
          <param>
            <type><ref refid="CRC_8h_1add273674b22f031b158220eeb560c7a0" kindref="member">crcpp_uint16</ref></type>
            <declname>CRCWidth</declname>
            <defname>CRCWidth</defname>
          </param>
        </templateparamlist>
        <type>CRCType</type>
        <definition>CRCType CRC::Finalize</definition>
        <argsstring>(CRCType remainder, CRCType finalXOR, bool reflectOutput)</argsstring>
        <name>Finalize</name>
        <param>
          <type>CRCType</type>
          <declname>remainder</declname>
        </param>
        <param>
          <type>CRCType</type>
          <declname>finalXOR</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reflectOutput</declname>
        </param>
        <briefdescription>
<para>Computes the final reflection and XOR of a <ref refid="classCRC" kindref="compound">CRC</ref> remainder. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">remainder</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classCRC" kindref="compound">CRC</ref> remainder to reflect and XOR </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">finalXOR</parametername>
</parameternamelist>
<parameterdescription>
<para>Final value to XOR with the remainder </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reflectOutput</parametername>
</parameternamelist>
<parameterdescription>
<para>true to reflect each byte of the remainder before the XOR </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>CRCType</parametername>
</parameternamelist>
<parameterdescription>
<para>Integer type for storing the <ref refid="classCRC" kindref="compound">CRC</ref> result </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>CRCWidth</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bits in the <ref refid="classCRC" kindref="compound">CRC</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Final <ref refid="classCRC" kindref="compound">CRC</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/protocols/packetizer/CRC.h" line="292" column="20" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/protocols/packetizer/CRC.h" bodystart="544" bodyend="556"/>
      </memberdef>
      <memberdef kind="function" id="classCRC_1a5818ddbe23b318349e59323ee03cb28f" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CRCType</type>
          </param>
          <param>
            <type><ref refid="CRC_8h_1add273674b22f031b158220eeb560c7a0" kindref="member">crcpp_uint16</ref></type>
            <declname>CRCWidth</declname>
            <defname>CRCWidth</defname>
          </param>
        </templateparamlist>
        <type>CRCType</type>
        <definition>CRCType CRC::UndoFinalize</definition>
        <argsstring>(CRCType remainder, CRCType finalXOR, bool reflectOutput)</argsstring>
        <name>UndoFinalize</name>
        <param>
          <type>CRCType</type>
          <declname>remainder</declname>
          <defname>crc</defname>
        </param>
        <param>
          <type>CRCType</type>
          <declname>finalXOR</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reflectOutput</declname>
        </param>
        <briefdescription>
<para>Undoes the process of computing the final reflection and XOR of a <ref refid="classCRC" kindref="compound">CRC</ref> remainder. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function allows for computation of multi-part CRCs </para>
</simplesect>
<simplesect kind="note"><para>Calling UndoFinalize() followed by Finalize() (or vice versa) will always return the original remainder value: <verbatim>CRCType x = ...;
CRCType y = Finalize(x, finalXOR, reflectOutput);
CRCType z = UndoFinalize(y, finalXOR, reflectOutput);
assert(x == z);
</verbatim></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">crc</parametername>
</parameternamelist>
<parameterdescription>
<para>Reflected and XORed <ref refid="classCRC" kindref="compound">CRC</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">finalXOR</parametername>
</parameternamelist>
<parameterdescription>
<para>Final value XORed with the remainder </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reflectOutput</parametername>
</parameternamelist>
<parameterdescription>
<para>true if the remainder is to be reflected </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>CRCType</parametername>
</parameternamelist>
<parameterdescription>
<para>Integer type for storing the <ref refid="classCRC" kindref="compound">CRC</ref> result </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>CRCWidth</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bits in the <ref refid="classCRC" kindref="compound">CRC</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Un-finalized <ref refid="classCRC" kindref="compound">CRC</ref> remainder </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/protocols/packetizer/CRC.h" line="295" column="20" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/protocols/packetizer/CRC.h" bodystart="576" bodyend="590"/>
      </memberdef>
      <memberdef kind="function" id="classCRC_1a78e9e8d7f86f3acfd6cc8b446a305b99" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CRCType</type>
          </param>
          <param>
            <type><ref refid="CRC_8h_1add273674b22f031b158220eeb560c7a0" kindref="member">crcpp_uint16</ref></type>
            <declname>CRCWidth</declname>
            <defname>CRCWidth</defname>
          </param>
        </templateparamlist>
        <type>CRCType</type>
        <definition>CRCType CRC::CalculateRemainder</definition>
        <argsstring>(const void *data, crcpp_size size, const Parameters&lt; CRCType, CRCWidth &gt; &amp;parameters, CRCType remainder)</argsstring>
        <name>CalculateRemainder</name>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="CRC_8h_1af44cfa9e71356f05c42b363cf04ea9a6" kindref="member">crcpp_size</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type>const <ref refid="structCRC_1_1Parameters" kindref="compound">Parameters</ref>&lt; CRCType, CRCWidth &gt; &amp;</type>
          <declname>parameters</declname>
        </param>
        <param>
          <type>CRCType</type>
          <declname>remainder</declname>
        </param>
        <briefdescription>
<para>Computes a <ref refid="classCRC" kindref="compound">CRC</ref> remainder. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data over which the remainder will be computed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">parameters</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classCRC" kindref="compound">CRC</ref> parameters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">remainder</parametername>
</parameternamelist>
<parameterdescription>
<para>Running <ref refid="classCRC" kindref="compound">CRC</ref> remainder. Can be an initial value or the result of a previous <ref refid="classCRC" kindref="compound">CRC</ref> remainder calculation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>CRCType</parametername>
</parameternamelist>
<parameterdescription>
<para>Integer type for storing the <ref refid="classCRC" kindref="compound">CRC</ref> result </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>CRCWidth</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bits in the <ref refid="classCRC" kindref="compound">CRC</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classCRC" kindref="compound">CRC</ref> remainder </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/protocols/packetizer/CRC.h" line="298" column="20" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/protocols/packetizer/CRC.h" bodystart="603" bodyend="705"/>
      </memberdef>
      <memberdef kind="function" id="classCRC_1a299e6466d0a6c91a510732880b2f7550" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CRCType</type>
          </param>
          <param>
            <type><ref refid="CRC_8h_1add273674b22f031b158220eeb560c7a0" kindref="member">crcpp_uint16</ref></type>
            <declname>CRCWidth</declname>
            <defname>CRCWidth</defname>
          </param>
        </templateparamlist>
        <type>CRCType</type>
        <definition>CRCType CRC::CalculateRemainder</definition>
        <argsstring>(const void *data, crcpp_size size, const Table&lt; CRCType, CRCWidth &gt; &amp;lookupTable, CRCType remainder)</argsstring>
        <name>CalculateRemainder</name>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="CRC_8h_1af44cfa9e71356f05c42b363cf04ea9a6" kindref="member">crcpp_size</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type>const <ref refid="structCRC_1_1Table" kindref="compound">Table</ref>&lt; CRCType, CRCWidth &gt; &amp;</type>
          <declname>lookupTable</declname>
        </param>
        <param>
          <type>CRCType</type>
          <declname>remainder</declname>
        </param>
        <briefdescription>
<para>Computes a <ref refid="classCRC" kindref="compound">CRC</ref> remainder using lookup table. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data over which the remainder will be computed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">lookupTable</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classCRC" kindref="compound">CRC</ref> lookup table </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">remainder</parametername>
</parameternamelist>
<parameterdescription>
<para>Running <ref refid="classCRC" kindref="compound">CRC</ref> remainder. Can be an initial value or the result of a previous <ref refid="classCRC" kindref="compound">CRC</ref> remainder calculation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>CRCType</parametername>
</parameternamelist>
<parameterdescription>
<para>Integer type for storing the <ref refid="classCRC" kindref="compound">CRC</ref> result </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>CRCWidth</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bits in the <ref refid="classCRC" kindref="compound">CRC</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classCRC" kindref="compound">CRC</ref> remainder </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/protocols/packetizer/CRC.h" line="301" column="20" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/protocols/packetizer/CRC.h" bodystart="718" bodyend="764"/>
      </memberdef>
      <memberdef kind="function" id="classCRC_1a34fa4b0a8fffa6519b5d756e95584c28" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IntegerType</type>
          </param>
        </templateparamlist>
        <type><ref refid="CRC_8h_1ac53723d95b5c8c7d707e8e3ebcb4e143" kindref="member">crcpp_constexpr</ref> IntegerType</type>
        <definition>crcpp_constexpr IntegerType CRC::BoundedConstexprValue</definition>
        <argsstring>(IntegerType x)</argsstring>
        <name>BoundedConstexprValue</name>
        <param>
          <type>IntegerType</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Function to force a compile-time expression to be &gt;= 0. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function is used to avoid compiler warnings because all constexpr values are evaluated in a function even in a branch will never be executed. This also means we don&apos;t need pragmas to get rid of warnings, but it still can be computed at compile-time. Win-win! </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">x</parametername>
</parameternamelist>
<parameterdescription>
<para>Compile-time expression to bound </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>CRCType</parametername>
</parameternamelist>
<parameterdescription>
<para>Integer type for storing the <ref refid="classCRC" kindref="compound">CRC</ref> result </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>CRCWidth</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bits in the <ref refid="classCRC" kindref="compound">CRC</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Non-negative compile-time expression </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/protocols/packetizer/CRC.h" line="304" column="40" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/protocols/packetizer/CRC.h" bodystart="777" bodyend="780"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Static class for computing CRCs. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="note"><para>This class supports computation of full and multi-part CRCs, using a bit-by-bit algorithm or a byte-by-byte lookup table. The CRCs are calculated using as many optimizations as is reasonable. If compiling with C++11, the constexpr keyword is used liberally so that many calculations are performed at compile-time instead of at runtime. </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/protocols/packetizer/CRC.h" line="143" column="1" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/protocols/packetizer/CRC.h" bodystart="142" bodyend="305"/>
    <listofallmembers>
      <member refid="classCRC_1a34fa4b0a8fffa6519b5d756e95584c28" prot="private" virt="non-virtual"><scope>CRC</scope><name>BoundedConstexprValue</name></member>
      <member refid="classCRC_1ae37d010c92c3afcf0da63834afc51469" prot="public" virt="non-virtual"><scope>CRC</scope><name>Calculate</name></member>
      <member refid="classCRC_1a49d563e8c4cd6d1cd8fe6991bc7feaa0" prot="public" virt="non-virtual"><scope>CRC</scope><name>Calculate</name></member>
      <member refid="classCRC_1a82d8aa1552599d285a883c55f45dd59e" prot="public" virt="non-virtual"><scope>CRC</scope><name>Calculate</name></member>
      <member refid="classCRC_1a89f8bd5de26eaf60dda955ac4e56fd57" prot="public" virt="non-virtual"><scope>CRC</scope><name>Calculate</name></member>
      <member refid="classCRC_1a78e9e8d7f86f3acfd6cc8b446a305b99" prot="private" virt="non-virtual"><scope>CRC</scope><name>CalculateRemainder</name></member>
      <member refid="classCRC_1a299e6466d0a6c91a510732880b2f7550" prot="private" virt="non-virtual"><scope>CRC</scope><name>CalculateRemainder</name></member>
      <member refid="classCRC_1ad843a3ac8e4bc04ddd263dc493a43015" prot="private" virt="non-virtual"><scope>CRC</scope><name>CRC</name></member>
      <member refid="classCRC_1a25faf1efb06001cb1cad810d55e71a58" prot="private" virt="non-virtual"><scope>CRC</scope><name>CRC</name></member>
      <member refid="classCRC_1aea3087ea6719e8eba36d6fcea3720a82" prot="public" virt="non-virtual"><scope>CRC</scope><name>CRC_16_ARC</name></member>
      <member refid="classCRC_1a7615784a91ab254f91583cddf8c0e28d" prot="public" virt="non-virtual"><scope>CRC</scope><name>CRC_16_BUYPASS</name></member>
      <member refid="classCRC_1accde5e695e1eef5e7be2df81d5f37e83" prot="public" virt="non-virtual"><scope>CRC</scope><name>CRC_16_CCITTFALSE</name></member>
      <member refid="classCRC_1aaf15ad266e319eb2d87d4f7ddbddef07" prot="public" virt="non-virtual"><scope>CRC</scope><name>CRC_16_GENIBUS</name></member>
      <member refid="classCRC_1a95f0f45a06b94e0cd5b92c9e550bba8a" prot="public" virt="non-virtual"><scope>CRC</scope><name>CRC_16_KERMIT</name></member>
      <member refid="classCRC_1ad676bda4d636e1b3a0c8dc2e2075321f" prot="public" virt="non-virtual"><scope>CRC</scope><name>CRC_16_X25</name></member>
      <member refid="classCRC_1a3035fe39bcafd47ec184b35617a46452" prot="public" virt="non-virtual"><scope>CRC</scope><name>CRC_16_XMODEM</name></member>
      <member refid="classCRC_1aea541af7b4c36708b8152476e8580053" prot="public" virt="non-virtual"><scope>CRC</scope><name>CRC_32</name></member>
      <member refid="classCRC_1ac503380a8c2b39ae146e17eef16f8f3c" prot="public" virt="non-virtual"><scope>CRC</scope><name>CRC_32_BZIP2</name></member>
      <member refid="classCRC_1a5648a717486b46badac3693de0c34546" prot="public" virt="non-virtual"><scope>CRC</scope><name>CRC_32_MPEG2</name></member>
      <member refid="classCRC_1ad038d81c003f21d254964566f7f8bc61" prot="public" virt="non-virtual"><scope>CRC</scope><name>CRC_32_POSIX</name></member>
      <member refid="classCRC_1a50f1e00559defde552c58ebcc741257b" prot="public" virt="non-virtual"><scope>CRC</scope><name>CRC_8</name></member>
      <member refid="classCRC_1af3247bcac33c4422cbbd97d0eddb1fe6" prot="private" virt="non-virtual"><scope>CRC</scope><name>Finalize</name></member>
      <member refid="classCRC_1a48051d8f4dc907665ba7307d8d5c1318" prot="private" virt="non-virtual"><scope>CRC</scope><name>operator=</name></member>
      <member refid="classCRC_1ab508d95b45054e2471eb4a16a9458208" prot="private" virt="non-virtual"><scope>CRC</scope><name>Reflect</name></member>
      <member refid="classCRC_1a5818ddbe23b318349e59323ee03cb28f" prot="private" virt="non-virtual"><scope>CRC</scope><name>UndoFinalize</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
