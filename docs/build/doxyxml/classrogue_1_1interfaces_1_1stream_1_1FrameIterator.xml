<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classrogue_1_1interfaces_1_1stream_1_1FrameIterator" kind="class" language="C++" prot="public">
    <compoundname>rogue::interfaces::stream::FrameIterator</compoundname>
    <basecompoundref prot="public" virt="non-virtual">std::iterator&lt; std::random_access_iterator_tag, uint8_t &gt;</basecompoundref>
    <includes refid="FrameIterator_8h" local="no">FrameIterator.h</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1aee3a66b0ddf3b769f015c89b610db0c7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class Frame</definition>
        <argsstring></argsstring>
        <name>Frame</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/stream/FrameIterator.h" line="43" column="13" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/stream/FrameIterator.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1ac05342bb2ffcc2370b2cdd8a85d246a0" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool rogue::interfaces::stream::FrameIterator::write_</definition>
        <argsstring></argsstring>
        <name>write_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/stream/FrameIterator.h" line="51" column="21" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/stream/FrameIterator.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1aaa3d766ef988845da4c3c8e5225d4cc3" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classrogue_1_1interfaces_1_1stream_1_1Frame" kindref="compound">rogue::interfaces::stream::Frame</ref> &gt;</type>
        <definition>std::shared_ptr&lt;rogue::interfaces::stream::Frame&gt; rogue::interfaces::stream::FrameIterator::frame_</definition>
        <argsstring></argsstring>
        <name>frame_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/stream/FrameIterator.h" line="54" column="32" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/stream/FrameIterator.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1adfb6c3a1ea4368988787af35d54e02c8" prot="private" static="no" mutable="no">
        <type>int32_t</type>
        <definition>int32_t rogue::interfaces::stream::FrameIterator::framePos_</definition>
        <argsstring></argsstring>
        <name>framePos_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/stream/FrameIterator.h" line="57" column="24" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/stream/FrameIterator.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1ad5cf4e0babc7f7012872a93cdd6c48fb" prot="private" static="no" mutable="no">
        <type>int32_t</type>
        <definition>int32_t rogue::interfaces::stream::FrameIterator::frameSize_</definition>
        <argsstring></argsstring>
        <name>frameSize_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/stream/FrameIterator.h" line="60" column="24" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/stream/FrameIterator.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1a9f07cf7e3b8370794ef0e7698127c568" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="classrogue_1_1interfaces_1_1stream_1_1Buffer" kindref="compound">rogue::interfaces::stream::Buffer</ref> &gt; &gt;::iterator</type>
        <definition>std::vector&lt;std::shared_ptr&lt;rogue::interfaces::stream::Buffer&gt; &gt;::iterator rogue::interfaces::stream::FrameIterator::buff_</definition>
        <argsstring></argsstring>
        <name>buff_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/stream/FrameIterator.h" line="63" column="39" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/stream/FrameIterator.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1aa14a8da0af8f1e47ed3478d3a5187574" prot="private" static="no" mutable="no">
        <type>int32_t</type>
        <definition>int32_t rogue::interfaces::stream::FrameIterator::buffBeg_</definition>
        <argsstring></argsstring>
        <name>buffBeg_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/stream/FrameIterator.h" line="66" column="24" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/stream/FrameIterator.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1a3fd2d9afe59d33e144ec269d4f315e99" prot="private" static="no" mutable="no">
        <type>int32_t</type>
        <definition>int32_t rogue::interfaces::stream::FrameIterator::buffEnd_</definition>
        <argsstring></argsstring>
        <name>buffEnd_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/stream/FrameIterator.h" line="69" column="24" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/stream/FrameIterator.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1a9900c0d337c833e4013c72fcdedc2685" prot="private" static="no" mutable="no">
        <type>uint8_t *</type>
        <definition>uint8_t* rogue::interfaces::stream::FrameIterator::data_</definition>
        <argsstring></argsstring>
        <name>data_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/stream/FrameIterator.h" line="72" column="25" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/stream/FrameIterator.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1a444254234ecec7174a798a605461f4d1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rogue::interfaces::stream::FrameIterator::FrameIterator</definition>
        <argsstring>(std::shared_ptr&lt; rogue::interfaces::stream::Frame &gt; frame, bool write, bool end)</argsstring>
        <name>FrameIterator</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classrogue_1_1interfaces_1_1stream_1_1Frame" kindref="compound">rogue::interfaces::stream::Frame</ref> &gt;</type>
          <declname>frame</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>write</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/stream/FrameIterator.h" line="48" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1aedb25f92734e7c1305137d0063d3db61" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void rogue::interfaces::stream::FrameIterator::increment</definition>
        <argsstring>(int32_t diff)</argsstring>
        <name>increment</name>
        <param>
          <type>int32_t</type>
          <declname>diff</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/stream/FrameIterator.h" line="76" column="28"/>
      </memberdef>
      <memberdef kind="function" id="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1abf1987407572d3a86b31976b2f19f5fd" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void rogue::interfaces::stream::FrameIterator::decrement</definition>
        <argsstring>(int32_t diff)</argsstring>
        <name>decrement</name>
        <param>
          <type>int32_t</type>
          <declname>diff</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/stream/FrameIterator.h" line="79" column="28"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1adb66585acb4e4a5855a3931049af5637" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rogue::interfaces::stream::FrameIterator::FrameIterator</definition>
        <argsstring>()</argsstring>
        <name>FrameIterator</name>
        <briefdescription>
<para>Create an empty iterator for later assignment. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/stream/FrameIterator.h" line="84" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1aa94c607c1d052c98cad21c978dba1f06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classrogue_1_1interfaces_1_1stream_1_1FrameIterator" kindref="compound">rogue::interfaces::stream::FrameIterator</ref></type>
        <definition>const rogue::interfaces::stream::FrameIterator rogue::interfaces::stream::FrameIterator::operator=</definition>
        <argsstring>(const rogue::interfaces::stream::FrameIterator &amp;rhs)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classrogue_1_1interfaces_1_1stream_1_1FrameIterator" kindref="compound">rogue::interfaces::stream::FrameIterator</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Copy assignment. </para>
        </briefdescription>
        <detaileddescription>
<para>Copy the state of another iterator into the current iterator. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/stream/FrameIterator.h" line="89" column="63"/>
      </memberdef>
      <memberdef kind="function" id="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1a8435804b76ed87d9f06bff5efe055cc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrogue_1_1interfaces_1_1stream_1_1FrameIterator" kindref="compound">rogue::interfaces::stream::FrameIterator</ref></type>
        <definition>rogue::interfaces::stream::FrameIterator rogue::interfaces::stream::FrameIterator::endBuffer</definition>
        <argsstring>()</argsstring>
        <name>endBuffer</name>
        <briefdescription>
<para>Get iterator marking the end of the current <ref refid="classrogue_1_1interfaces_1_1stream_1_1Buffer" kindref="compound">Buffer</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>The returned iterator is an end marker for the current buffer, and possibly the end of the frame. If the current <ref refid="classrogue_1_1interfaces_1_1stream_1_1Buffer" kindref="compound">Buffer</ref> is followed by another buffer containing valid data for a Read or available space for a write, the returned iterator will mark the start of the next <ref refid="classrogue_1_1interfaces_1_1stream_1_1Buffer" kindref="compound">Buffer</ref>. Having this iterator is useful when iterating through contiguous memory blocks for more efficient data copying when using std::copy(). <simplesect kind="return"><para>Iterator marking the end of the current <ref refid="classrogue_1_1interfaces_1_1stream_1_1Buffer" kindref="compound">Buffer</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/stream/FrameIterator.h" line="101" column="57"/>
      </memberdef>
      <memberdef kind="function" id="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1aecdc5899fb0eae2c08bd349698ed493c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t rogue::interfaces::stream::FrameIterator::remBuffer</definition>
        <argsstring>()</argsstring>
        <name>remBuffer</name>
        <briefdescription>
<para>Get remaining bytes in current buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Similar to the <ref refid="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1a8435804b76ed87d9f06bff5efe055cc4" kindref="member">endBuffer()</ref> call, this method returns the remaining bytes in the current <ref refid="classrogue_1_1interfaces_1_1stream_1_1Buffer" kindref="compound">Buffer</ref>. <simplesect kind="return"><para>Remaining bytes in the current <ref refid="classrogue_1_1interfaces_1_1stream_1_1Buffer" kindref="compound">Buffer</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/stream/FrameIterator.h" line="108" column="25"/>
      </memberdef>
      <memberdef kind="function" id="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1aa67ac3b5624eede19d4f074da5b77867" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t &amp;</type>
        <definition>uint8_t&amp; rogue::interfaces::stream::FrameIterator::operator*</definition>
        <argsstring>() const</argsstring>
        <name>operator*</name>
        <briefdescription>
<para>De-reference. </para>
        </briefdescription>
        <detaileddescription>
<para>This allows data at the current iterator position to be accessed using a *it de-reference </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/stream/FrameIterator.h" line="114" column="25"/>
      </memberdef>
      <memberdef kind="function" id="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1a7b7eec2f5a4cc5ca6217192cf9adee78" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t *</type>
        <definition>uint8_t* rogue::interfaces::stream::FrameIterator::ptr</definition>
        <argsstring>() const</argsstring>
        <name>ptr</name>
        <briefdescription>
<para>Return uint8_t pointer to current position. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint8_t pointer to current position </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/stream/FrameIterator.h" line="122" column="25"/>
      </memberdef>
      <memberdef kind="function" id="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1ae2b3cd5cffe9b31e516bef0d281c42ac" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t rogue::interfaces::stream::FrameIterator::operator[]</definition>
        <argsstring>(const uint32_t) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>const uint32_t</type>
        </param>
        <briefdescription>
<para>De-reference by index. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns the data value at the passed relative offset <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Relative offset to access </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Data value at passed offset </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/stream/FrameIterator.h" line="129" column="24"/>
      </memberdef>
      <memberdef kind="function" id="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1acc9194bbe4f01b381d5dd748f0f0d5a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classrogue_1_1interfaces_1_1stream_1_1FrameIterator" kindref="compound">rogue::interfaces::stream::FrameIterator</ref> &amp;</type>
        <definition>const rogue::interfaces::stream::FrameIterator&amp; rogue::interfaces::stream::FrameIterator::operator++</definition>
        <argsstring>()</argsstring>
        <name>operator++</name>
        <briefdescription>
<para>Pre-increment the iterator position. </para>
        </briefdescription>
        <detaileddescription>
<para>Increment the current iterator position by a single location and return a reference to the current iterator. <simplesect kind="return"><para>Reference to iterator at the new position. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/stream/FrameIterator.h" line="136" column="64"/>
      </memberdef>
      <memberdef kind="function" id="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1a3ea2048f9e413d11cf9e940626b2c3bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrogue_1_1interfaces_1_1stream_1_1FrameIterator" kindref="compound">rogue::interfaces::stream::FrameIterator</ref></type>
        <definition>rogue::interfaces::stream::FrameIterator rogue::interfaces::stream::FrameIterator::operator++</definition>
        <argsstring>(int)</argsstring>
        <name>operator++</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
<para>Post-increment the iterator position. </para>
        </briefdescription>
        <detaileddescription>
<para>Increment the current iterator position by a single location and return a reference to the previous iterator position. This results in a copy of the iterator being created before the increment. <simplesect kind="return"><para>Reference to iterator at the old position. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/stream/FrameIterator.h" line="144" column="57"/>
      </memberdef>
      <memberdef kind="function" id="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1af5d99371c0f5c2ef573e97bbc736dbc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classrogue_1_1interfaces_1_1stream_1_1FrameIterator" kindref="compound">rogue::interfaces::stream::FrameIterator</ref> &amp;</type>
        <definition>const rogue::interfaces::stream::FrameIterator&amp; rogue::interfaces::stream::FrameIterator::operator--</definition>
        <argsstring>()</argsstring>
        <name>operator--</name>
        <briefdescription>
<para>Pre-decrement the iterator position. </para>
        </briefdescription>
        <detaileddescription>
<para>Decrement the current iterator position by a single location and return a reference to the current iterator. <simplesect kind="return"><para>Reference to iterator at the new position. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/stream/FrameIterator.h" line="151" column="64"/>
      </memberdef>
      <memberdef kind="function" id="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1a988b7ae226846c6ed7f2e12ee698b21c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrogue_1_1interfaces_1_1stream_1_1FrameIterator" kindref="compound">rogue::interfaces::stream::FrameIterator</ref></type>
        <definition>rogue::interfaces::stream::FrameIterator rogue::interfaces::stream::FrameIterator::operator--</definition>
        <argsstring>(int)</argsstring>
        <name>operator--</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
<para>Post-decrement the iterator position. </para>
        </briefdescription>
        <detaileddescription>
<para>Decrement the current iterator position by a single location and return a reference to the previous iterator position. This results in a copy of the iterator being created before the decrement. <simplesect kind="return"><para>Reference to iterator at the old position. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/stream/FrameIterator.h" line="159" column="57"/>
      </memberdef>
      <memberdef kind="function" id="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1a6bce12c6587be858005c48a914b3c345" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rogue::interfaces::stream::FrameIterator::operator!=</definition>
        <argsstring>(const rogue::interfaces::stream::FrameIterator &amp;other) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classrogue_1_1interfaces_1_1stream_1_1FrameIterator" kindref="compound">rogue::interfaces::stream::FrameIterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Not Equal. </para>
        </briefdescription>
        <detaileddescription>
<para>Compare this iterator to another iterator and return True if they are at different positions. <simplesect kind="return"><para>True if the two iterators are not equal </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/stream/FrameIterator.h" line="166" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1ab3acc9567fc339c2327bdd767e928c6e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rogue::interfaces::stream::FrameIterator::operator==</definition>
        <argsstring>(const rogue::interfaces::stream::FrameIterator &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classrogue_1_1interfaces_1_1stream_1_1FrameIterator" kindref="compound">rogue::interfaces::stream::FrameIterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Equal. </para>
        </briefdescription>
        <detaileddescription>
<para>Compare this iterator to another iterator and return True if they are reference the same position within the <ref refid="classrogue_1_1interfaces_1_1stream_1_1Frame" kindref="compound">Frame</ref>. <simplesect kind="return"><para>True if the two iterators are equal </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/stream/FrameIterator.h" line="173" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1a54500b39b060ddb99a4c265638471677" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rogue::interfaces::stream::FrameIterator::operator&lt;</definition>
        <argsstring>(const rogue::interfaces::stream::FrameIterator &amp;other) const</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classrogue_1_1interfaces_1_1stream_1_1FrameIterator" kindref="compound">rogue::interfaces::stream::FrameIterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Less than. </para>
        </briefdescription>
        <detaileddescription>
<para>Compare this iterator to another iterator and return True if the local iterator (left of &lt;) is less than the iterator being compare against. <simplesect kind="return"><para>True if the left iterator is less than the right. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/stream/FrameIterator.h" line="180" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1a74496c0c484f980f67326723458718b2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rogue::interfaces::stream::FrameIterator::operator&gt;</definition>
        <argsstring>(const rogue::interfaces::stream::FrameIterator &amp;other) const</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classrogue_1_1interfaces_1_1stream_1_1FrameIterator" kindref="compound">rogue::interfaces::stream::FrameIterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Greater than. </para>
        </briefdescription>
        <detaileddescription>
<para>Compare this iterator to another iterator and return True if the local iterator (left of &gt;) is greater than the iterator being compare against. <simplesect kind="return"><para>True if the left iterator is greater than the right. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/stream/FrameIterator.h" line="187" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1aaf79a42b4bc74b0e6e980fcb506256a9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rogue::interfaces::stream::FrameIterator::operator&lt;=</definition>
        <argsstring>(const rogue::interfaces::stream::FrameIterator &amp;other) const</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classrogue_1_1interfaces_1_1stream_1_1FrameIterator" kindref="compound">rogue::interfaces::stream::FrameIterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Less than or equal to. </para>
        </briefdescription>
        <detaileddescription>
<para>Compare this iterator to another iterator and return True if the local iterator (left of &lt;=) is less than or equal to the iterator being compare against. <simplesect kind="return"><para>True if the left iterator is less than or equal to the right. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/stream/FrameIterator.h" line="194" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1ab8637647aa51d0993c612b7811f43872" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rogue::interfaces::stream::FrameIterator::operator&gt;=</definition>
        <argsstring>(const rogue::interfaces::stream::FrameIterator &amp;other) const</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classrogue_1_1interfaces_1_1stream_1_1FrameIterator" kindref="compound">rogue::interfaces::stream::FrameIterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Greater than or equal to. </para>
        </briefdescription>
        <detaileddescription>
<para>Compare this iterator to another iterator and return True if the local iterator (left of &gt;=) is greater than or equal to the iterator being compare against. <simplesect kind="return"><para>True if the left iterator is greater than or equal to the right. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/stream/FrameIterator.h" line="201" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1a07cedb61cf512cd99d306be640da58e8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrogue_1_1interfaces_1_1stream_1_1FrameIterator" kindref="compound">rogue::interfaces::stream::FrameIterator</ref></type>
        <definition>rogue::interfaces::stream::FrameIterator rogue::interfaces::stream::FrameIterator::operator+</definition>
        <argsstring>(const int32_t add) const</argsstring>
        <name>operator+</name>
        <param>
          <type>const int32_t</type>
          <declname>add</declname>
        </param>
        <briefdescription>
<para>Increment by value. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a new iterator and increment its position by the passed value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>add</parametername>
</parameternamelist>
<parameterdescription>
<para>Positive or negative value to increment the current position by. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New iterator at the new position </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/stream/FrameIterator.h" line="208" column="57"/>
      </memberdef>
      <memberdef kind="function" id="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1ae965ce315a0bad4c745ec417fa0e2a46" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrogue_1_1interfaces_1_1stream_1_1FrameIterator" kindref="compound">rogue::interfaces::stream::FrameIterator</ref></type>
        <definition>rogue::interfaces::stream::FrameIterator rogue::interfaces::stream::FrameIterator::operator-</definition>
        <argsstring>(const int32_t sub) const</argsstring>
        <name>operator-</name>
        <param>
          <type>const int32_t</type>
          <declname>sub</declname>
        </param>
        <briefdescription>
<para>Decrement by value. </para>
        </briefdescription>
        <detaileddescription>
<para>Create a new iterator and decrement its position by the passed value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sub</parametername>
</parameternamelist>
<parameterdescription>
<para>Positive or negative value to decrement the current position by. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New iterator at the new position </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/stream/FrameIterator.h" line="215" column="57"/>
      </memberdef>
      <memberdef kind="function" id="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1a1765e4a5065f8029dd230c37e78a79b2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t rogue::interfaces::stream::FrameIterator::operator-</definition>
        <argsstring>(const rogue::interfaces::stream::FrameIterator &amp;other) const</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classrogue_1_1interfaces_1_1stream_1_1FrameIterator" kindref="compound">rogue::interfaces::stream::FrameIterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Subtract incrementers. </para>
        </briefdescription>
        <detaileddescription>
<para>Return the difference between the current incrementer position (left of -) and the compared incrementer position. <simplesect kind="return"><para>Different of the two positions as a int32_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/stream/FrameIterator.h" line="222" column="24"/>
      </memberdef>
      <memberdef kind="function" id="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1a8a3339584412ad1dc74a390d7b9baa0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrogue_1_1interfaces_1_1stream_1_1FrameIterator" kindref="compound">rogue::interfaces::stream::FrameIterator</ref> &amp;</type>
        <definition>rogue::interfaces::stream::FrameIterator&amp; rogue::interfaces::stream::FrameIterator::operator+=</definition>
        <argsstring>(const int32_t add)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const int32_t</type>
          <declname>add</declname>
        </param>
        <briefdescription>
<para>Increment by value. </para>
        </briefdescription>
        <detaileddescription>
<para>Increment the current iterator by the passed value <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>add</parametername>
</parameternamelist>
<parameterdescription>
<para>Positive or negative value to increment the current position by. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to current iterator at the new position </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/stream/FrameIterator.h" line="229" column="58"/>
      </memberdef>
      <memberdef kind="function" id="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1a7aa15e05d7f702cd1b1c8ddffed2ed5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classrogue_1_1interfaces_1_1stream_1_1FrameIterator" kindref="compound">rogue::interfaces::stream::FrameIterator</ref> &amp;</type>
        <definition>rogue::interfaces::stream::FrameIterator&amp; rogue::interfaces::stream::FrameIterator::operator-=</definition>
        <argsstring>(const int32_t sub)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const int32_t</type>
          <declname>sub</declname>
        </param>
        <briefdescription>
<para>Decrement by value. </para>
        </briefdescription>
        <detaileddescription>
<para>Decrement the current iterator by the passed value <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sub</parametername>
</parameternamelist>
<parameterdescription>
<para>Positive or negative value to decrement the current position by. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reference to current iterator at the new position </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/stream/FrameIterator.h" line="236" column="58"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classrogue_1_1interfaces_1_1stream_1_1Frame" kindref="compound">Frame</ref> iterator. </para>
    </briefdescription>
    <detaileddescription>
<para>The <ref refid="classrogue_1_1interfaces_1_1stream_1_1FrameIterator" kindref="compound">FrameIterator</ref> class implements a C++ standard random access iterator with a base type of uint8_t.</para>
<para>This class is not available in Python. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>rogue::interfaces::stream::FrameIterator</label>
        <link refid="classrogue_1_1interfaces_1_1stream_1_1FrameIterator"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>std::iterator&lt; std::random_access_iterator_tag, uint8_t &gt;</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>rogue::interfaces::stream::FrameIterator</label>
        <link refid="classrogue_1_1interfaces_1_1stream_1_1FrameIterator"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>std::iterator&lt; std::random_access_iterator_tag, uint8_t &gt;</label>
      </node>
    </collaborationgraph>
    <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/stream/FrameIterator.h" line="41" column="52" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/stream/FrameIterator.h" bodystart="41" bodyend="238"/>
    <listofallmembers>
      <member refid="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1a9f07cf7e3b8370794ef0e7698127c568" prot="private" virt="non-virtual"><scope>rogue::interfaces::stream::FrameIterator</scope><name>buff_</name></member>
      <member refid="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1aa14a8da0af8f1e47ed3478d3a5187574" prot="private" virt="non-virtual"><scope>rogue::interfaces::stream::FrameIterator</scope><name>buffBeg_</name></member>
      <member refid="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1a3fd2d9afe59d33e144ec269d4f315e99" prot="private" virt="non-virtual"><scope>rogue::interfaces::stream::FrameIterator</scope><name>buffEnd_</name></member>
      <member refid="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1a9900c0d337c833e4013c72fcdedc2685" prot="private" virt="non-virtual"><scope>rogue::interfaces::stream::FrameIterator</scope><name>data_</name></member>
      <member refid="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1abf1987407572d3a86b31976b2f19f5fd" prot="private" virt="non-virtual"><scope>rogue::interfaces::stream::FrameIterator</scope><name>decrement</name></member>
      <member refid="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1a8435804b76ed87d9f06bff5efe055cc4" prot="public" virt="non-virtual"><scope>rogue::interfaces::stream::FrameIterator</scope><name>endBuffer</name></member>
      <member refid="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1aee3a66b0ddf3b769f015c89b610db0c7" prot="private" virt="non-virtual"><scope>rogue::interfaces::stream::FrameIterator</scope><name>Frame</name></member>
      <member refid="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1aaa3d766ef988845da4c3c8e5225d4cc3" prot="private" virt="non-virtual"><scope>rogue::interfaces::stream::FrameIterator</scope><name>frame_</name></member>
      <member refid="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1a444254234ecec7174a798a605461f4d1" prot="private" virt="non-virtual"><scope>rogue::interfaces::stream::FrameIterator</scope><name>FrameIterator</name></member>
      <member refid="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1adb66585acb4e4a5855a3931049af5637" prot="public" virt="non-virtual"><scope>rogue::interfaces::stream::FrameIterator</scope><name>FrameIterator</name></member>
      <member refid="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1adfb6c3a1ea4368988787af35d54e02c8" prot="private" virt="non-virtual"><scope>rogue::interfaces::stream::FrameIterator</scope><name>framePos_</name></member>
      <member refid="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1ad5cf4e0babc7f7012872a93cdd6c48fb" prot="private" virt="non-virtual"><scope>rogue::interfaces::stream::FrameIterator</scope><name>frameSize_</name></member>
      <member refid="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1aedb25f92734e7c1305137d0063d3db61" prot="private" virt="non-virtual"><scope>rogue::interfaces::stream::FrameIterator</scope><name>increment</name></member>
      <member refid="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1a6bce12c6587be858005c48a914b3c345" prot="public" virt="non-virtual"><scope>rogue::interfaces::stream::FrameIterator</scope><name>operator!=</name></member>
      <member refid="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1aa67ac3b5624eede19d4f074da5b77867" prot="public" virt="non-virtual"><scope>rogue::interfaces::stream::FrameIterator</scope><name>operator*</name></member>
      <member refid="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1a07cedb61cf512cd99d306be640da58e8" prot="public" virt="non-virtual"><scope>rogue::interfaces::stream::FrameIterator</scope><name>operator+</name></member>
      <member refid="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1acc9194bbe4f01b381d5dd748f0f0d5a3" prot="public" virt="non-virtual"><scope>rogue::interfaces::stream::FrameIterator</scope><name>operator++</name></member>
      <member refid="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1a3ea2048f9e413d11cf9e940626b2c3bd" prot="public" virt="non-virtual"><scope>rogue::interfaces::stream::FrameIterator</scope><name>operator++</name></member>
      <member refid="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1a8a3339584412ad1dc74a390d7b9baa0a" prot="public" virt="non-virtual"><scope>rogue::interfaces::stream::FrameIterator</scope><name>operator+=</name></member>
      <member refid="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1ae965ce315a0bad4c745ec417fa0e2a46" prot="public" virt="non-virtual"><scope>rogue::interfaces::stream::FrameIterator</scope><name>operator-</name></member>
      <member refid="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1a1765e4a5065f8029dd230c37e78a79b2" prot="public" virt="non-virtual"><scope>rogue::interfaces::stream::FrameIterator</scope><name>operator-</name></member>
      <member refid="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1af5d99371c0f5c2ef573e97bbc736dbc4" prot="public" virt="non-virtual"><scope>rogue::interfaces::stream::FrameIterator</scope><name>operator--</name></member>
      <member refid="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1a988b7ae226846c6ed7f2e12ee698b21c" prot="public" virt="non-virtual"><scope>rogue::interfaces::stream::FrameIterator</scope><name>operator--</name></member>
      <member refid="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1a7aa15e05d7f702cd1b1c8ddffed2ed5e" prot="public" virt="non-virtual"><scope>rogue::interfaces::stream::FrameIterator</scope><name>operator-=</name></member>
      <member refid="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1a54500b39b060ddb99a4c265638471677" prot="public" virt="non-virtual"><scope>rogue::interfaces::stream::FrameIterator</scope><name>operator&lt;</name></member>
      <member refid="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1aaf79a42b4bc74b0e6e980fcb506256a9" prot="public" virt="non-virtual"><scope>rogue::interfaces::stream::FrameIterator</scope><name>operator&lt;=</name></member>
      <member refid="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1aa94c607c1d052c98cad21c978dba1f06" prot="public" virt="non-virtual"><scope>rogue::interfaces::stream::FrameIterator</scope><name>operator=</name></member>
      <member refid="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1ab3acc9567fc339c2327bdd767e928c6e" prot="public" virt="non-virtual"><scope>rogue::interfaces::stream::FrameIterator</scope><name>operator==</name></member>
      <member refid="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1a74496c0c484f980f67326723458718b2" prot="public" virt="non-virtual"><scope>rogue::interfaces::stream::FrameIterator</scope><name>operator&gt;</name></member>
      <member refid="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1ab8637647aa51d0993c612b7811f43872" prot="public" virt="non-virtual"><scope>rogue::interfaces::stream::FrameIterator</scope><name>operator&gt;=</name></member>
      <member refid="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1ae2b3cd5cffe9b31e516bef0d281c42ac" prot="public" virt="non-virtual"><scope>rogue::interfaces::stream::FrameIterator</scope><name>operator[]</name></member>
      <member refid="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1a7b7eec2f5a4cc5ca6217192cf9adee78" prot="public" virt="non-virtual"><scope>rogue::interfaces::stream::FrameIterator</scope><name>ptr</name></member>
      <member refid="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1aecdc5899fb0eae2c08bd349698ed493c" prot="public" virt="non-virtual"><scope>rogue::interfaces::stream::FrameIterator</scope><name>remBuffer</name></member>
      <member refid="classrogue_1_1interfaces_1_1stream_1_1FrameIterator_1ac05342bb2ffcc2370b2cdd8a85d246a0" prot="private" virt="non-virtual"><scope>rogue::interfaces::stream::FrameIterator</scope><name>write_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
