<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classrogue_1_1interfaces_1_1memory_1_1Slave" kind="class" language="C++" prot="public">
    <compoundname>rogue::interfaces::memory::Slave</compoundname>
    <basecompoundref refid="classrogue_1_1EnableSharedFromThis" prot="public" virt="non-virtual">rogue::EnableSharedFromThis&lt; rogue::interfaces::memory::Slave &gt;</basecompoundref>
    <derivedcompoundref refid="classrogue_1_1hardware_1_1axi_1_1AxiMemMap" prot="public" virt="non-virtual">rogue::hardware::axi::AxiMemMap</derivedcompoundref>
    <derivedcompoundref refid="classrogue_1_1hardware_1_1MemMap" prot="public" virt="non-virtual">rogue::hardware::MemMap</derivedcompoundref>
    <derivedcompoundref refid="classrogue_1_1interfaces_1_1memory_1_1Emulate" prot="public" virt="non-virtual">rogue::interfaces::memory::Emulate</derivedcompoundref>
    <derivedcompoundref refid="classrogue_1_1interfaces_1_1memory_1_1Hub" prot="public" virt="non-virtual">rogue::interfaces::memory::Hub</derivedcompoundref>
    <derivedcompoundref refid="classrogue_1_1interfaces_1_1memory_1_1SlaveWrap" prot="public" virt="non-virtual">rogue::interfaces::memory::SlaveWrap</derivedcompoundref>
    <derivedcompoundref refid="classrogue_1_1interfaces_1_1memory_1_1TcpClient" prot="public" virt="non-virtual">rogue::interfaces::memory::TcpClient</derivedcompoundref>
    <derivedcompoundref refid="classrogue_1_1protocols_1_1srp_1_1SrpV0" prot="public" virt="non-virtual">rogue::protocols::srp::SrpV0</derivedcompoundref>
    <derivedcompoundref refid="classrogue_1_1protocols_1_1srp_1_1SrpV3" prot="public" virt="non-virtual">rogue::protocols::srp::SrpV3</derivedcompoundref>
    <includes refid="memory_2Slave_8h" local="no">Slave.h</includes>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classrogue_1_1interfaces_1_1memory_1_1Slave_1a9ed8097f6e4111bc0aa1d2264d9603b5" prot="private" static="no">
        <type>std::map&lt; uint32_t, std::shared_ptr&lt; <ref refid="classrogue_1_1interfaces_1_1memory_1_1Transaction" kindref="compound">rogue::interfaces::memory::Transaction</ref> &gt; &gt;</type>
        <definition>typedef std::map&lt;uint32_t, std::shared_ptr&lt;rogue::interfaces::memory::Transaction&gt; &gt; rogue::interfaces::memory::Slave::TransactionMap</definition>
        <argsstring></argsstring>
        <name>TransactionMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/memory/Slave.h" line="61" column="33" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/memory/Slave.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classrogue_1_1interfaces_1_1memory_1_1Slave_1a84a0a7c7aee1f56308616504aff277ae" prot="private" static="yes" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t rogue::interfaces::memory::Slave::classIdx_</definition>
        <argsstring></argsstring>
        <name>classIdx_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/memory/Slave.h" line="52" column="32" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/memory/Slave.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrogue_1_1interfaces_1_1memory_1_1Slave_1af5d0b9462d3fea34fd292ee5efd6bb12" prot="private" static="yes" mutable="no">
        <type>std::mutex</type>
        <definition>std::mutex rogue::interfaces::memory::Slave::classMtx_</definition>
        <argsstring></argsstring>
        <name>classMtx_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/memory/Slave.h" line="55" column="34" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/memory/Slave.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classrogue_1_1interfaces_1_1memory_1_1Slave_1acc98bc30fe9fa4b533ff334075f3eca3" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t rogue::interfaces::memory::Slave::id_</definition>
        <argsstring></argsstring>
        <name>id_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/memory/Slave.h" line="58" column="25" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/memory/Slave.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrogue_1_1interfaces_1_1memory_1_1Slave_1a424245eebdbf2cf8bfac4383329df679" prot="private" static="no" mutable="no">
        <type>TransactionMap</type>
        <definition>TransactionMap rogue::interfaces::memory::Slave::tranMap_</definition>
        <argsstring></argsstring>
        <name>tranMap_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/memory/Slave.h" line="64" column="31" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/memory/Slave.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrogue_1_1interfaces_1_1memory_1_1Slave_1af9aba25dc8cafc11f6ee5b4edb13472a" prot="private" static="no" mutable="no">
        <type>std::mutex</type>
        <definition>std::mutex rogue::interfaces::memory::Slave::slaveMtx_</definition>
        <argsstring></argsstring>
        <name>slaveMtx_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/memory/Slave.h" line="67" column="27" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/memory/Slave.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrogue_1_1interfaces_1_1memory_1_1Slave_1a58128f9a485567d1e86536f88e5acfff" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t rogue::interfaces::memory::Slave::min_</definition>
        <argsstring></argsstring>
        <name>min_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/memory/Slave.h" line="70" column="25" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/memory/Slave.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrogue_1_1interfaces_1_1memory_1_1Slave_1a5fb28b37bc1105edc5ad710eb946eb9c" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t rogue::interfaces::memory::Slave::max_</definition>
        <argsstring></argsstring>
        <name>max_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/memory/Slave.h" line="73" column="25" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/memory/Slave.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrogue_1_1interfaces_1_1memory_1_1Slave_1a1c20c8c09e22b79d646aeb6aa035536c" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string rogue::interfaces::memory::Slave::name_</definition>
        <argsstring></argsstring>
        <name>name_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/memory/Slave.h" line="76" column="28" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/memory/Slave.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classrogue_1_1interfaces_1_1memory_1_1Slave_1a2cfe1d611cc9cb725acf98b9dd78bf21" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classrogue_1_1interfaces_1_1memory_1_1Slave" kindref="compound">rogue::interfaces::memory::Slave</ref> &gt;</type>
        <definition>static std::shared_ptr&lt;rogue::interfaces::memory::Slave&gt; rogue::interfaces::memory::Slave::create</definition>
        <argsstring>(uint32_t min, uint32_t max)</argsstring>
        <name>create</name>
        <param>
          <type>uint32_t</type>
          <declname>min</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max</declname>
        </param>
        <briefdescription>
<para>Class factory which returns a pointer to a <ref refid="classrogue_1_1interfaces_1_1memory_1_1Slave" kindref="compound">Slave</ref> (SlavePtr) </para>
        </briefdescription>
        <detaileddescription>
<para>Exposed as <ref refid="classrogue_1_1interfaces_1_1memory_1_1Slave" kindref="compound">rogue.interfaces.memory.Slave()</ref> to Python</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>min</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum transaction this <ref refid="classrogue_1_1interfaces_1_1memory_1_1Slave" kindref="compound">Slave</ref> can accept. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum transaction this <ref refid="classrogue_1_1interfaces_1_1memory_1_1Slave" kindref="compound">Slave</ref> can accept. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/memory/Slave.h" line="86" column="39"/>
      </memberdef>
      <memberdef kind="function" id="classrogue_1_1interfaces_1_1memory_1_1Slave_1afebd18e8302957664356d6d7e05bcd88" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void rogue::interfaces::memory::Slave::setup_python</definition>
        <argsstring>()</argsstring>
        <name>setup_python</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/memory/Slave.h" line="89" column="28"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classrogue_1_1interfaces_1_1memory_1_1Slave_1a8957d9bc3be4fd66028d296f03a2db94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>rogue::interfaces::memory::Slave::Slave</definition>
        <argsstring>(uint32_t min, uint32_t max)</argsstring>
        <name>Slave</name>
        <param>
          <type>uint32_t</type>
          <declname>min</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/memory/Slave.h" line="92" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classrogue_1_1interfaces_1_1memory_1_1Slave_1a0b97756687857c4825e02b7538eb4ae5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual rogue::interfaces::memory::Slave::~Slave</definition>
        <argsstring>()</argsstring>
        <name>~Slave</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/memory/Slave.h" line="95" column="24"/>
      </memberdef>
      <memberdef kind="function" id="classrogue_1_1interfaces_1_1memory_1_1Slave_1a22bce0d8c63db18645e193f27b4eca5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void rogue::interfaces::memory::Slave::stop</definition>
        <argsstring>()</argsstring>
        <name>stop</name>
        <reimplementedby refid="classrogue_1_1hardware_1_1axi_1_1AxiMemMap_1a1d6248b5e9ae079fe5c2e9342595111f">stop</reimplementedby>
        <reimplementedby refid="classrogue_1_1hardware_1_1MemMap_1a5b418a9ac5e1dc9ceb0bc63635efaf40">stop</reimplementedby>
        <reimplementedby refid="classrogue_1_1interfaces_1_1memory_1_1TcpClient_1a9dfc1a3b42872a8aacbb8fe4ee067123">stop</reimplementedby>
        <briefdescription>
<para>Stop the interface. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/memory/Slave.h" line="98" column="29"/>
      </memberdef>
      <memberdef kind="function" id="classrogue_1_1interfaces_1_1memory_1_1Slave_1a97ac9ad623a4920c6ebf58bc18e7ec7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rogue::interfaces::memory::Slave::addTransaction</definition>
        <argsstring>(std::shared_ptr&lt; rogue::interfaces::memory::Transaction &gt; transaction)</argsstring>
        <name>addTransaction</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classrogue_1_1interfaces_1_1memory_1_1Transaction" kindref="compound">rogue::interfaces::memory::Transaction</ref> &gt;</type>
          <declname>transaction</declname>
        </param>
        <briefdescription>
<para>Add a transaction to the internal tracking map. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is called by the sub-class to add a transaction into the local tracking map for later retrieval. This is used when the transaction will be completed later as the result of protocol data being returned to the <ref refid="classrogue_1_1interfaces_1_1memory_1_1Slave" kindref="compound">Slave</ref>.</para>
<para>Exposed to python as _addTransaction() <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>transaction</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to transaction as TransactionPtr </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/memory/Slave.h" line="108" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classrogue_1_1interfaces_1_1memory_1_1Slave_1a4bf250f6776be14c6d8ed924807eba82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classrogue_1_1interfaces_1_1memory_1_1Transaction" kindref="compound">rogue::interfaces::memory::Transaction</ref> &gt;</type>
        <definition>std::shared_ptr&lt;rogue::interfaces::memory::Transaction&gt; rogue::interfaces::memory::Slave::getTransaction</definition>
        <argsstring>(uint32_t index)</argsstring>
        <name>getTransaction</name>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Get a transaction from the internal tracking map. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is called by the sub-class to retrieve an existing transaction using the unique transaction ID. If the transaction exists in the list the pointer to that transaction will be returned. If not a NULL pointer will be returned. When <ref refid="classrogue_1_1interfaces_1_1memory_1_1Slave_1a4bf250f6776be14c6d8ed924807eba82" kindref="member">getTransaction()</ref> is called the map will also be checked for stale transactions which will be removed from the map.</para>
<para>Exposed to python as _getTransaction() <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of transaction to lookup </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to transaction as TransactionPtr or NULL if not found </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/memory/Slave.h" line="121" column="32"/>
      </memberdef>
      <memberdef kind="function" id="classrogue_1_1interfaces_1_1memory_1_1Slave_1afcc3624c3622839e96cf5861593c255c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t rogue::interfaces::memory::Slave::min</definition>
        <argsstring>()</argsstring>
        <name>min</name>
        <briefdescription>
<para>Get min size from slave. </para>
        </briefdescription>
        <detaileddescription>
<para>Not exposed to Python <simplesect kind="return"><para>Minimum transaction size </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/memory/Slave.h" line="127" column="25"/>
      </memberdef>
      <memberdef kind="function" id="classrogue_1_1interfaces_1_1memory_1_1Slave_1a7214283697192866d04f4fd84e6952d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t rogue::interfaces::memory::Slave::max</definition>
        <argsstring>()</argsstring>
        <name>max</name>
        <briefdescription>
<para>Get max size from slave. </para>
        </briefdescription>
        <detaileddescription>
<para>Not exposed to Python <simplesect kind="return"><para>Maximum transaction size </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/memory/Slave.h" line="133" column="25"/>
      </memberdef>
      <memberdef kind="function" id="classrogue_1_1interfaces_1_1memory_1_1Slave_1a470bd4cecb4444fd59b553825cd67129" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t rogue::interfaces::memory::Slave::id</definition>
        <argsstring>()</argsstring>
        <name>id</name>
        <briefdescription>
<para>Get unique slave ID. </para>
        </briefdescription>
        <detaileddescription>
<para>Not exposed to Python <simplesect kind="return"><para>Unique slave ID </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/memory/Slave.h" line="139" column="25"/>
      </memberdef>
      <memberdef kind="function" id="classrogue_1_1interfaces_1_1memory_1_1Slave_1adabad1d0e8d40325ca6dfeeeb6df19ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rogue::interfaces::memory::Slave::setName</definition>
        <argsstring>(std::string)</argsstring>
        <name>setName</name>
        <param>
          <type>std::string</type>
        </param>
        <briefdescription>
<para>Set slave Name. </para>
        </briefdescription>
        <detaileddescription>
<para>Sxposed to Python as setName </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/memory/Slave.h" line="144" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classrogue_1_1interfaces_1_1memory_1_1Slave_1a282550bb08cdd6f5e06db13835bd5f6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string rogue::interfaces::memory::Slave::name</definition>
        <argsstring>()</argsstring>
        <name>name</name>
        <briefdescription>
<para>Get slave Name. </para>
        </briefdescription>
        <detaileddescription>
<para>Not exposed to Python <simplesect kind="return"><para><ref refid="classrogue_1_1interfaces_1_1memory_1_1Slave" kindref="compound">Slave</ref> Name </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/memory/Slave.h" line="150" column="28"/>
      </memberdef>
      <memberdef kind="function" id="classrogue_1_1interfaces_1_1memory_1_1Slave_1af5ce81bef7de4de74c1e3cede21d8919" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>uint32_t</type>
        <definition>virtual uint32_t rogue::interfaces::memory::Slave::doSlaveId</definition>
        <argsstring>()</argsstring>
        <name>doSlaveId</name>
        <reimplementedby refid="classrogue_1_1interfaces_1_1memory_1_1Hub_1a2192bbbcdca36e580095d8f7de584a83">doSlaveId</reimplementedby>
        <briefdescription>
<para>Interface to service SlaveId request from <ref refid="classrogue_1_1interfaces_1_1memory_1_1Master" kindref="compound">Master</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Called by memory <ref refid="classrogue_1_1interfaces_1_1memory_1_1Master" kindref="compound">Master</ref>. May be overridden by <ref refid="classrogue_1_1interfaces_1_1memory_1_1Slave" kindref="compound">Slave</ref> sub-class. By default returns the local <ref refid="classrogue_1_1interfaces_1_1memory_1_1Slave" kindref="compound">Slave</ref> ID</para>
<para>Not exposed to Python <simplesect kind="return"><para>Unique <ref refid="classrogue_1_1interfaces_1_1memory_1_1Slave" kindref="compound">Slave</ref> ID </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/memory/Slave.h" line="159" column="33"/>
      </memberdef>
      <memberdef kind="function" id="classrogue_1_1interfaces_1_1memory_1_1Slave_1a46c858794b25f486c4909cbbef5df5f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>virtual std::string rogue::interfaces::memory::Slave::doSlaveName</definition>
        <argsstring>()</argsstring>
        <name>doSlaveName</name>
        <reimplementedby refid="classrogue_1_1interfaces_1_1memory_1_1Hub_1ac82017f09bd5f93bc20355949cb5d69e">doSlaveName</reimplementedby>
        <briefdescription>
<para>Interface to service SlaveName request from <ref refid="classrogue_1_1interfaces_1_1memory_1_1Master" kindref="compound">Master</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Called by memory <ref refid="classrogue_1_1interfaces_1_1memory_1_1Master" kindref="compound">Master</ref>. May be overridden by <ref refid="classrogue_1_1interfaces_1_1memory_1_1Slave" kindref="compound">Slave</ref> sub-class. By default returns the local <ref refid="classrogue_1_1interfaces_1_1memory_1_1Slave" kindref="compound">Slave</ref> Name</para>
<para>Not exposed to Python <simplesect kind="return"><para>Unique <ref refid="classrogue_1_1interfaces_1_1memory_1_1Slave" kindref="compound">Slave</ref> Name </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/memory/Slave.h" line="168" column="36"/>
      </memberdef>
      <memberdef kind="function" id="classrogue_1_1interfaces_1_1memory_1_1Slave_1ae690bb54ec073edbd751d8362617a7f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>uint32_t</type>
        <definition>virtual uint32_t rogue::interfaces::memory::Slave::doMinAccess</definition>
        <argsstring>()</argsstring>
        <name>doMinAccess</name>
        <reimplementedby refid="classrogue_1_1interfaces_1_1memory_1_1Hub_1adafcf767f51ec3d82511c1fe9772e433">doMinAccess</reimplementedby>
        <reimplementedby refid="classrogue_1_1interfaces_1_1memory_1_1SlaveWrap_1af1619a08ef954998deefee89965dc501">doMinAccess</reimplementedby>
        <briefdescription>
<para>Interface to service the getMinAccess request from an attached master. </para>
        </briefdescription>
        <detaileddescription>
<para>By default the local min access value will be returned. A <ref refid="classrogue_1_1interfaces_1_1memory_1_1Slave" kindref="compound">Slave</ref> sub-class is allowed to override this method.</para>
<para>Exposed as _doMinAccess() to Python <simplesect kind="return"><para>Min transaction access size </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/memory/Slave.h" line="177" column="33"/>
      </memberdef>
      <memberdef kind="function" id="classrogue_1_1interfaces_1_1memory_1_1Slave_1aaa9fdbb5cc041f56343344e1c32db679" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>uint32_t</type>
        <definition>virtual uint32_t rogue::interfaces::memory::Slave::doMaxAccess</definition>
        <argsstring>()</argsstring>
        <name>doMaxAccess</name>
        <reimplementedby refid="classrogue_1_1interfaces_1_1memory_1_1Hub_1aeed19f9acc23e3a2a67ef59b9b714ca8">doMaxAccess</reimplementedby>
        <reimplementedby refid="classrogue_1_1interfaces_1_1memory_1_1SlaveWrap_1a27f91bb48d6669f80130c58502b4bec2">doMaxAccess</reimplementedby>
        <briefdescription>
<para>Interface to service the getMaxAccess request from an attached master. </para>
        </briefdescription>
        <detaileddescription>
<para>By default the local max access value will be returned. A <ref refid="classrogue_1_1interfaces_1_1memory_1_1Slave" kindref="compound">Slave</ref> sub-class is allowed to override this method.</para>
<para>Exposed as _doMaxAccess() to Python <simplesect kind="return"><para>Max transaction access size </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/memory/Slave.h" line="186" column="33"/>
      </memberdef>
      <memberdef kind="function" id="classrogue_1_1interfaces_1_1memory_1_1Slave_1a435848e7e20020e67ec76a9ef157b990" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>uint64_t</type>
        <definition>virtual uint64_t rogue::interfaces::memory::Slave::doAddress</definition>
        <argsstring>()</argsstring>
        <name>doAddress</name>
        <reimplementedby refid="classrogue_1_1interfaces_1_1memory_1_1Hub_1acb54adf64d4dff8709151abf041d5288">doAddress</reimplementedby>
        <reimplementedby refid="classrogue_1_1interfaces_1_1memory_1_1SlaveWrap_1acc0560d8ae8b10f0dab32d9cc94d3b40">doAddress</reimplementedby>
        <briefdescription>
<para>Interface to service the getAddress request from an attached master. </para>
        </briefdescription>
        <detaileddescription>
<para>This <ref refid="classrogue_1_1interfaces_1_1memory_1_1Slave" kindref="compound">Slave</ref> will return 0 byte default. A <ref refid="classrogue_1_1interfaces_1_1memory_1_1Slave" kindref="compound">Slave</ref> sub-class is allowed to override this method.</para>
<para>Exposed as _doAddress() to Python <simplesect kind="return"><para>Address </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/memory/Slave.h" line="195" column="33"/>
      </memberdef>
      <memberdef kind="function" id="classrogue_1_1interfaces_1_1memory_1_1Slave_1a43c5e62dd732c5ecff7dadb0a5a8bfa2" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void rogue::interfaces::memory::Slave::doTransaction</definition>
        <argsstring>(std::shared_ptr&lt; rogue::interfaces::memory::Transaction &gt; transaction)</argsstring>
        <name>doTransaction</name>
        <reimplementedby refid="classrogue_1_1protocols_1_1srp_1_1SrpV3_1aecf106e568406bc23f6bfefa8c510c31">doTransaction</reimplementedby>
        <reimplementedby refid="classrogue_1_1protocols_1_1srp_1_1SrpV0_1a7b2b255b438189bf98a11c8a687f24ac">doTransaction</reimplementedby>
        <reimplementedby refid="classrogue_1_1hardware_1_1axi_1_1AxiMemMap_1abc238025f5fc09aa8c4f749de82c0771">doTransaction</reimplementedby>
        <reimplementedby refid="classrogue_1_1hardware_1_1MemMap_1a49451bcb4e20bf4238828ae332d07b3f">doTransaction</reimplementedby>
        <reimplementedby refid="classrogue_1_1interfaces_1_1memory_1_1TcpClient_1ae75a51930d7e3772ee39125a0ee4d30f">doTransaction</reimplementedby>
        <reimplementedby refid="classrogue_1_1interfaces_1_1memory_1_1Emulate_1a62125d3c51dba0c227a5b1306046f660">doTransaction</reimplementedby>
        <reimplementedby refid="classrogue_1_1interfaces_1_1memory_1_1Hub_1aa3fc493ad646e9ca60e2dd31e069b296">doTransaction</reimplementedby>
        <reimplementedby refid="classrogue_1_1interfaces_1_1memory_1_1HubWrap_1ac5d078dc3c0f86d8d59caa7c1098c12d">doTransaction</reimplementedby>
        <reimplementedby refid="classrogue_1_1interfaces_1_1memory_1_1SlaveWrap_1ad67e84e312c96a23bb1518cc52cf5c05">doTransaction</reimplementedby>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classrogue_1_1interfaces_1_1memory_1_1Transaction" kindref="compound">rogue::interfaces::memory::Transaction</ref> &gt;</type>
          <declname>transaction</declname>
        </param>
        <briefdescription>
<para>Interface to service the transaction request from an attached master. </para>
        </briefdescription>
        <detaileddescription>
<para>By default the <ref refid="classrogue_1_1interfaces_1_1memory_1_1Slave" kindref="compound">Slave</ref> class will return an Unsupported error.</para>
<para>It is possible for this method to be overridden in either a Python or C++ subclass. Examples of sub-classing a <ref refid="classrogue_1_1interfaces_1_1memory_1_1Slave" kindref="compound">Slave</ref> is included elsewhere in this document.</para>
<para>Exposed to Python as _doTransaction() <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>transaction</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classrogue_1_1interfaces_1_1memory_1_1Transaction" kindref="compound">Transaction</ref> pointer as TransactionPtr </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/memory/Slave.h" line="207" column="29"/>
      </memberdef>
      <memberdef kind="function" id="classrogue_1_1interfaces_1_1memory_1_1Slave_1aa934540c189dc41ee19f7124e7526f85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rogue::interfaces::memory::Slave::lshiftPy</definition>
        <argsstring>(boost::python::object p)</argsstring>
        <name>lshiftPy</name>
        <param>
          <type>boost::python::object</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Support &lt;&lt; operator in python. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/memory/Slave.h" line="212" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classrogue_1_1interfaces_1_1memory_1_1Slave_1a633b040c861b41682af1b8f549223631" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classrogue_1_1interfaces_1_1memory_1_1Master" kindref="compound">rogue::interfaces::memory::Master</ref> &gt; &amp;</type>
        <definition>std::shared_ptr&lt;rogue::interfaces::memory::Master&gt;&amp; rogue::interfaces::memory::Slave::operator&lt;&lt;</definition>
        <argsstring>(std::shared_ptr&lt; rogue::interfaces::memory::Master &gt; &amp;other)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classrogue_1_1interfaces_1_1memory_1_1Master" kindref="compound">rogue::interfaces::memory::Master</ref> &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Support &lt;&lt; operator in C++. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/memory/Slave.h" line="212" column="21"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Memory <ref refid="classrogue_1_1interfaces_1_1memory_1_1Slave" kindref="compound">Slave</ref> device. </para>
    </briefdescription>
    <detaileddescription>
<para>The memory <ref refid="classrogue_1_1interfaces_1_1memory_1_1Slave" kindref="compound">Slave</ref> device accepts and services transactions from one or more <ref refid="classrogue_1_1interfaces_1_1memory_1_1Master" kindref="compound">Master</ref> devices. The <ref refid="classrogue_1_1interfaces_1_1memory_1_1Slave" kindref="compound">Slave</ref> device is normally sub-classed in either C++ or Python to provide an interfaces to hardware or the next level memory transaction protocol, such as SrpV0 or SrpV3. Examples of <ref refid="classrogue_1_1interfaces_1_1memory_1_1Slave" kindref="compound">Slave</ref> sub-class implementations are included elsewhere in this document.</para>
<para>The <ref refid="classrogue_1_1interfaces_1_1memory_1_1Slave" kindref="compound">Slave</ref> object provides mechanisms for tracking current transactions. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="8">
        <label>rogue::interfaces::memory::Hub</label>
        <link refid="classrogue_1_1interfaces_1_1memory_1_1Hub"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>rogue::hardware::MemMap</label>
        <link refid="classrogue_1_1hardware_1_1MemMap"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>rogue::EnableSharedFromThisBase</label>
        <link refid="classrogue_1_1EnableSharedFromThisBase"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>rogue::hardware::axi::AxiMemMap</label>
        <link refid="classrogue_1_1hardware_1_1axi_1_1AxiMemMap"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>rogue::EnableSharedFromThis&lt; rogue::interfaces::memory::Slave &gt;</label>
        <link refid="classrogue_1_1EnableSharedFromThis"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>rogue::interfaces::memory::HubWrap</label>
        <link refid="classrogue_1_1interfaces_1_1memory_1_1HubWrap"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>rogue::interfaces::memory::Emulate</label>
        <link refid="classrogue_1_1interfaces_1_1memory_1_1Emulate"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>rogue::protocols::srp::SrpV0</label>
        <link refid="classrogue_1_1protocols_1_1srp_1_1SrpV0"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>rogue::protocols::srp::SrpV3</label>
        <link refid="classrogue_1_1protocols_1_1srp_1_1SrpV3"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>rogue::interfaces::memory::SlaveWrap</label>
        <link refid="classrogue_1_1interfaces_1_1memory_1_1SlaveWrap"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>rogue::interfaces::memory::TcpClient</label>
        <link refid="classrogue_1_1interfaces_1_1memory_1_1TcpClient"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>std::enable_shared_from_this&lt; rogue::EnableSharedFromThisBase &gt;</label>
      </node>
      <node id="1">
        <label>rogue::interfaces::memory::Slave</label>
        <link refid="classrogue_1_1interfaces_1_1memory_1_1Slave"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>rogue::EnableSharedFromThisBase</label>
        <link refid="classrogue_1_1EnableSharedFromThisBase"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>rogue::EnableSharedFromThis&lt; rogue::interfaces::memory::Slave &gt;</label>
        <link refid="classrogue_1_1EnableSharedFromThis"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>std::enable_shared_from_this&lt; rogue::EnableSharedFromThisBase &gt;</label>
      </node>
      <node id="1">
        <label>rogue::interfaces::memory::Slave</label>
        <link refid="classrogue_1_1interfaces_1_1memory_1_1Slave"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/memory/Slave.h" line="49" column="57" bodyfile="/afs/slac.stanford.edu/u/gu/cdollar/rogue/include/rogue/interfaces/memory/Slave.h" bodystart="49" bodyend="220"/>
    <listofallmembers>
      <member refid="classrogue_1_1interfaces_1_1memory_1_1Slave_1a97ac9ad623a4920c6ebf58bc18e7ec7f" prot="public" virt="non-virtual"><scope>rogue::interfaces::memory::Slave</scope><name>addTransaction</name></member>
      <member refid="classrogue_1_1interfaces_1_1memory_1_1Slave_1a84a0a7c7aee1f56308616504aff277ae" prot="private" virt="non-virtual"><scope>rogue::interfaces::memory::Slave</scope><name>classIdx_</name></member>
      <member refid="classrogue_1_1interfaces_1_1memory_1_1Slave_1af5d0b9462d3fea34fd292ee5efd6bb12" prot="private" virt="non-virtual"><scope>rogue::interfaces::memory::Slave</scope><name>classMtx_</name></member>
      <member refid="classrogue_1_1interfaces_1_1memory_1_1Slave_1a2cfe1d611cc9cb725acf98b9dd78bf21" prot="public" virt="non-virtual"><scope>rogue::interfaces::memory::Slave</scope><name>create</name></member>
      <member refid="classrogue_1_1interfaces_1_1memory_1_1Slave_1a435848e7e20020e67ec76a9ef157b990" prot="public" virt="virtual"><scope>rogue::interfaces::memory::Slave</scope><name>doAddress</name></member>
      <member refid="classrogue_1_1interfaces_1_1memory_1_1Slave_1aaa9fdbb5cc041f56343344e1c32db679" prot="public" virt="virtual"><scope>rogue::interfaces::memory::Slave</scope><name>doMaxAccess</name></member>
      <member refid="classrogue_1_1interfaces_1_1memory_1_1Slave_1ae690bb54ec073edbd751d8362617a7f9" prot="public" virt="virtual"><scope>rogue::interfaces::memory::Slave</scope><name>doMinAccess</name></member>
      <member refid="classrogue_1_1interfaces_1_1memory_1_1Slave_1af5ce81bef7de4de74c1e3cede21d8919" prot="public" virt="virtual"><scope>rogue::interfaces::memory::Slave</scope><name>doSlaveId</name></member>
      <member refid="classrogue_1_1interfaces_1_1memory_1_1Slave_1a46c858794b25f486c4909cbbef5df5f4" prot="public" virt="virtual"><scope>rogue::interfaces::memory::Slave</scope><name>doSlaveName</name></member>
      <member refid="classrogue_1_1interfaces_1_1memory_1_1Slave_1a43c5e62dd732c5ecff7dadb0a5a8bfa2" prot="public" virt="virtual"><scope>rogue::interfaces::memory::Slave</scope><name>doTransaction</name></member>
      <member refid="classrogue_1_1interfaces_1_1memory_1_1Slave_1a4bf250f6776be14c6d8ed924807eba82" prot="public" virt="non-virtual"><scope>rogue::interfaces::memory::Slave</scope><name>getTransaction</name></member>
      <member refid="classrogue_1_1interfaces_1_1memory_1_1Slave_1a470bd4cecb4444fd59b553825cd67129" prot="public" virt="non-virtual"><scope>rogue::interfaces::memory::Slave</scope><name>id</name></member>
      <member refid="classrogue_1_1interfaces_1_1memory_1_1Slave_1acc98bc30fe9fa4b533ff334075f3eca3" prot="private" virt="non-virtual"><scope>rogue::interfaces::memory::Slave</scope><name>id_</name></member>
      <member refid="classrogue_1_1interfaces_1_1memory_1_1Slave_1aa934540c189dc41ee19f7124e7526f85" prot="public" virt="non-virtual"><scope>rogue::interfaces::memory::Slave</scope><name>lshiftPy</name></member>
      <member refid="classrogue_1_1interfaces_1_1memory_1_1Slave_1a7214283697192866d04f4fd84e6952d5" prot="public" virt="non-virtual"><scope>rogue::interfaces::memory::Slave</scope><name>max</name></member>
      <member refid="classrogue_1_1interfaces_1_1memory_1_1Slave_1a5fb28b37bc1105edc5ad710eb946eb9c" prot="private" virt="non-virtual"><scope>rogue::interfaces::memory::Slave</scope><name>max_</name></member>
      <member refid="classrogue_1_1interfaces_1_1memory_1_1Slave_1afcc3624c3622839e96cf5861593c255c" prot="public" virt="non-virtual"><scope>rogue::interfaces::memory::Slave</scope><name>min</name></member>
      <member refid="classrogue_1_1interfaces_1_1memory_1_1Slave_1a58128f9a485567d1e86536f88e5acfff" prot="private" virt="non-virtual"><scope>rogue::interfaces::memory::Slave</scope><name>min_</name></member>
      <member refid="classrogue_1_1interfaces_1_1memory_1_1Slave_1a282550bb08cdd6f5e06db13835bd5f6f" prot="public" virt="non-virtual"><scope>rogue::interfaces::memory::Slave</scope><name>name</name></member>
      <member refid="classrogue_1_1interfaces_1_1memory_1_1Slave_1a1c20c8c09e22b79d646aeb6aa035536c" prot="private" virt="non-virtual"><scope>rogue::interfaces::memory::Slave</scope><name>name_</name></member>
      <member refid="classrogue_1_1interfaces_1_1memory_1_1Slave_1a633b040c861b41682af1b8f549223631" prot="public" virt="non-virtual"><scope>rogue::interfaces::memory::Slave</scope><name>operator&lt;&lt;</name></member>
      <member refid="classrogue_1_1interfaces_1_1memory_1_1Slave_1adabad1d0e8d40325ca6dfeeeb6df19ac" prot="public" virt="non-virtual"><scope>rogue::interfaces::memory::Slave</scope><name>setName</name></member>
      <member refid="classrogue_1_1interfaces_1_1memory_1_1Slave_1afebd18e8302957664356d6d7e05bcd88" prot="public" virt="non-virtual"><scope>rogue::interfaces::memory::Slave</scope><name>setup_python</name></member>
      <member refid="classrogue_1_1EnableSharedFromThis_1a2d79e35bc7be4d939e9a82ae58da5400" prot="public" virt="non-virtual"><scope>rogue::interfaces::memory::Slave</scope><name>shared_from_this</name></member>
      <member refid="classrogue_1_1interfaces_1_1memory_1_1Slave_1a8957d9bc3be4fd66028d296f03a2db94" prot="public" virt="non-virtual"><scope>rogue::interfaces::memory::Slave</scope><name>Slave</name></member>
      <member refid="classrogue_1_1interfaces_1_1memory_1_1Slave_1af9aba25dc8cafc11f6ee5b4edb13472a" prot="private" virt="non-virtual"><scope>rogue::interfaces::memory::Slave</scope><name>slaveMtx_</name></member>
      <member refid="classrogue_1_1interfaces_1_1memory_1_1Slave_1a22bce0d8c63db18645e193f27b4eca5d" prot="public" virt="virtual"><scope>rogue::interfaces::memory::Slave</scope><name>stop</name></member>
      <member refid="classrogue_1_1interfaces_1_1memory_1_1Slave_1a424245eebdbf2cf8bfac4383329df679" prot="private" virt="non-virtual"><scope>rogue::interfaces::memory::Slave</scope><name>tranMap_</name></member>
      <member refid="classrogue_1_1interfaces_1_1memory_1_1Slave_1a9ed8097f6e4111bc0aa1d2264d9603b5" prot="private" virt="non-virtual"><scope>rogue::interfaces::memory::Slave</scope><name>TransactionMap</name></member>
      <member refid="classrogue_1_1EnableSharedFromThisBase_1a30602a01922086d80c07a8099278b41a" prot="public" virt="virtual"><scope>rogue::interfaces::memory::Slave</scope><name>~EnableSharedFromThisBase</name></member>
      <member refid="classrogue_1_1interfaces_1_1memory_1_1Slave_1a0b97756687857c4825e02b7538eb4ae5" prot="public" virt="virtual"><scope>rogue::interfaces::memory::Slave</scope><name>~Slave</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
