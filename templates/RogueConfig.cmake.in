# ----------------------------------------------------------------------------
# Title      : Rogue Cmake Export Template
# ----------------------------------------------------------------------------
# File       : RogueConfig.cmake.in
# ----------------------------------------------------------------------------
# Description:
# Rogue export file to be overridden by Cmake.
# ----------------------------------------------------------------------------
# This file is part of the rogue software platform. It is subject to 
# the license terms in the LICENSE.txt file found in the top-level directory 
# of this distribution and at: 
#    https://confluence.slac.stanford.edu/display/ppareg/LICENSE.html. 
# No part of the rogue software platform, including this file, may be 
# copied, modified, propagated, or distributed except according to the terms 
# contained in the LICENSE.txt file.
# ----------------------------------------------------------------------------

# Rogue cmake configuration file. Used when compiling against the rogue library.

# Add support for building in conda environment
if (DEFINED ENV{CONDA_PREFIX})
   set(CMAKE_PREFIX_PATH "$ENV{CONDA_PREFIX}")
   link_directories($ENV{CONDA_PREFIX}/lib)
endif()

# Check cmake version
cmake_minimum_required(VERSION 3.5)
include(InstallRequiredSystemLibraries)

#####################################
# Find python3
#####################################
set(DO_PYTHON 0)

find_package(PythonInterp 3.6)

if (PYTHONINTERP_FOUND)
   find_package(PythonLibs 3.6)

   if (PYTHONLIBS_FOUND)
      set(DO_PYTHON 1)
   endif()
endif()

#####################################
# Boost Configuration
#####################################
set(Boost_USE_MULTITHREADED ON)

# Boost may need help on SLAC machines
set(BOOST_ROOT:PATHNAME $ENV{BOOST_PATH})

# First try standard suffix for boost
if (DO_PYTHON)
find_package(Boost 1.58 COMPONENTS system thread python3)
endif()

# Next try Debian/Ubuntu suffix for boost
if ((NOT Boost_FOUND) AND DO_PYTHON)
   find_package(Boost 1.58 COMPONENTS system thread python-py36)
endif()

# Next try Mac with homebrew boost/python36
if ((NOT Boost_FOUND) AND DO_PYTHON)
   find_package(Boost 1.58 COMPONENTS system thread python36)
endif()

# Try without python
if (NOT Boost_FOUND)
   set(DO_PYTHON 0)
   find_package(Boost 1.58 COMPONENTS system thread)
endif()

# Nothing worked
if (NOT Boost_FOUND)
   message(FATAL_ERROR "Failed to find boost libraries!")
endif()

#####################################
# Optional EPICS V3
#####################################
if(DO_PYTHON AND DEFINED ENV{EPICS_BASE})
   set(DO_EPICS_V3 1)
   set(EPICSV3_BASE_DIR  $ENV{EPICS_BASE})
   if(DEFINED ENV{EPICS_HOST_ARCH})
       set(EPICSV3_ARCH      $ENV{EPICS_HOST_ARCH})
   else()
       execute_process(COMMAND ${EPICSV3_BASE_DIR}/startup/EpicsHostArch 
                       OUTPUT_VARIABLE EPICSV3_ARCH OUTPUT_STRIP_TRAILING_WHITESPACE)
       string(REGEX REPLACE "\n$" "" EPICSV3_ARCH "${EPICSV3_ARCH}")
   endif()
   set(EPICSV3_LIB_DIR   ${EPICSV3_BASE_DIR}/lib/${EPICSV3_ARCH} )
   set(EPICSV3_INCLUDES  ${EPICSV3_BASE_DIR}/include
                         ${EPICSV3_BASE_DIR}/include/compiler/gcc 
                         ${EPICSV3_BASE_DIR}/include/os/Linux)
   set(EPICSV3_LIBRARIES ${EPICSV3_LIB_DIR}/libcas.so 
                         ${EPICSV3_LIB_DIR}/libca.so 
                         ${EPICSV3_LIB_DIR}/libCom.so 
                         ${EPICSV3_LIB_DIR}/libgdd.so )
else()
   set(DO_EPICS_V3 0)
endif()

# Include paths
set(ROGUE_INCLUDE_DIRS @CONF_INCLUDE_DIRS@
                       ${Boost_INCLUDE_DIRS}
                       ${PYTHON_INCLUDE_DIRS}
                       ${EPICSV3_INCLUDES})

# Set librarires
set(ROGUE_LIBRARIES @CONF_LIBRARIES@
                    ${Boost_LIBRARIES}
                    ${PYTHON_LIBRARIES}
                    ${EPICSV3_LIBRARIES}
                    LINK_PUBLIC bz2)

