name: Rogue Integration
on: [push]

jobs:
  full_build_test:
    name: Full Build Test
    runs-on: ubuntu-latest
    steps:

      # This step checks out a copy of your repository.
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Setup Environment
        run: |
          EPICS_BASE=${GITHUB_WORKSPACE}/packages/epics/base-7.0.3
          EPICS_PCAS_ROOT=${GITHUB_WORKSPACE}/packages/pcas/pcas-4.13.2
          LD_LIBRARY_PATH=/usr/lib:${EPICS_BASE}/lib/linux-x86_64:${EPICS_PCAS_ROOT}/lib/linux-x86_64
          echo "EPICS_BASE=$EPICS_BASE" >> $GITHUB_ENV
          echo "EPICS_PCAS_ROOT=$EPICS_PCAS_ROOT" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          sudo apt-get install doxygen doxygen-doc libzmq3-dev libboost-all-dev
          python -m pip install --upgrade pip
          pip install setuptools
          pip install -r pip_requirements.txt

      - name: Install EPICS Base
        run: |
          mkdir -p ${EPICS_BASE}
          cd ${EPICS_BASE}
          pwd
          wget -O base-7.0.3.tar.gz  https://github.com/epics-base/epics-base/archive/R7.0.3.tar.gz
          tar xzf base-7.0.3.tar.gz --strip 1
          make clean && make && make install

      - name: Install EPICS PCAS
        run: |
          mkdir -p ${EPICS_PCAS_ROOT}
          cd ${EPICS_PCAS_ROOT}
          wget -O pcas-4.13.2.tar.gz https://github.com/epics-modules/pcas/archive/v4.13.2.tar.gz
          tar xzf pcas-4.13.2.tar.gz --strip 1
          echo "EPICS_BASE=$EPICS_BASE" >> configure/RELEASE.local
          make clean && make && make install

      # Rogue
      - name: Build Rogue
        run: |
          python -c "import numpy; print(numpy.get_include())"
          mkdir build; cd build
          cmake .. -DROGUE_INSTALL=local
          make -j4 install

      # Run Tests
      - name: Rogue Tests
        run: |
          source setup_rogue.sh
          python -m pytest --cov
          python -m compileall -f ./python/
          flake8 --count ./python/

      # Code Coverage
      - name: Code Coverage
        run: |
          source setup_rogue.sh
          codecov
          coverage report -m

      # Documentation
      - name: Generate Documentation
        if: github.ref == 'refs/heads/documentation'
        run: |
          source setup_rogue.sh
          cd docs
          make html
          cd ..
          doctr deploy . --built-docs docs/build/html --deploy-branch-name gh-pages --branch-whitelist documentation

  small_build_test:
    name: Small Build Test
    runs-on: ubuntu-latest
    steps:

      # This step checks out a copy of your repository.
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |
          sudo apt-get install libzmq3-dev

      # Rogue
      - name: Build Rogue
        run: |
          mkdir build; cd build
          cmake .. -DROGUE_INSTALL=local -DNO_PYTHON=1 -DSTATIC_LIB=1
          make -j4 install

  gen_release:
    name: Generate Release
    runs-on: ubuntu-latest
    needs: [full_build_test, small_build_test]
    if: startsWith(github.ref, 'refs/tags/')
    steps:

      - uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Get Image Information
        id: get_image_info
        run: |
          echo ::set-output name=tag::`git describe --tags`

      - name: Get Ruckus
        run: |
          git clone https://github.com/slaclab/ruckus.git
          pip install -r ruckus/scripts/pip_requirements.txt

      - name: Gen Release
        env:
          TRAVIS_REPO_SLUG: slaclab/rogue
          TRAVIS_TAG: ${{ steps.get_image_info.outputs.tag }}
          GH_REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python ruckus/scripts/releaseGen.py

  conda_build:
    name: Anaconda Build
      #needs: [full_build_test, small_build_test]
    if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/pre-release'
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-10.15
    runs-on: ${{ matrix.os }}
    steps:

      # This step checks out a copy of your repository.
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Setup MacOS
        if: matrix.os == 'macos-10.15'
        run: |
          git clone https://github.com/phracker/MacOSX-SDKs
          sudo mkdir -p /opt/
          sudo mv MacOSX-SDKs/MacOSX10.15.sdk /opt/
          CONDA_BUILD_SYSROOT=/opt/MacOSX10.15.sdk
          CONDA_BUILD=1
          echo "CONDA_BUILD_SYSROOT=$CONDA_BUILD_SYSROOT" >> $GITHUB_ENV
          echo "CONDA_BUILD=$CONDA_BUILD" >> $GITHUB_ENV

      - name: Setup anaconda
        env:
          OS_NAME: ${{ matrix.os }}
        run: |
          if [ $OS_NAME == "macos-10.15" ]
          then
            wget -O miniconda.sh https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh
          else
            wget -O miniconda.sh https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh
          fi
          bash miniconda.sh -b -p miniconda
          export PATH="${GITHUB_WORKSPACE}/miniconda/bin:$PATH"
          hash -r
          source miniconda/etc/profile.d/conda.sh
          conda config --set always_yes yes
          conda install conda-build anaconda-client conda-verify
          if [ $OS_NAME == "macos-10.15" ]
          then
            conda install libiconv libarchive -c conda-forge
          fi
          conda update -q conda conda-build
          conda update --all

      - name: Get Image Information
        id: get_image_info
        env:
          CONDA_UPLOAD_TOKEN_DEV: ${{ secrets.CONDA_UPLOAD_TOKEN_DEV }}
          CONDA_UPLOAD_TOKEN_TAG: ${{ secrets.CONDA_UPLOAD_TOKEN_TAG }}
        run: |
          echo ::set-output name=tag::`git describe --tags`
          echo ::set-output name=branch::`echo ${GITHUB_REF} | awk 'BEGIN { FS = "/" } ; { print $3 }'`
          if [ ${GITHUB_REF} == "refs/heads/pre-release" ]
          then
              echo ::set-output name=token::$CONDA_UPLOAD_TOKEN_DEV
          else
              echo ::set-output name=token::$CONDA_UPLOAD_TOKEN_TAG
          fi
          if [ $OS_NAME == "macos-10.15" ]
          then
              echo ::set-output name=os::osx-64
          else
              echo ::set-output name=os::linux-64
          fi

      - name: Build And Upload Rogue
        run: |
          conda build --debug conda-recipe --output-folder bld-dir -c tidair-packages -c conda-forge
          anaconda -t ${{ steps.get_image_info.outputs.token }} upload bld-dir/${{ steps.get_image_info.outputs.os }}/*.tar.bz2

  docker_build:
    name: Docker Build
    runs-on: ubuntu-latest
      #needs: [full_build_test, small_build_test]
    if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/pre-release'
    steps:

      # This step checks out a copy of your repository.
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get Image Information
        id: get_image_info
        run: |
          echo ::set-output name=tag::`git describe --tags`
          echo ::set-output name=branch::`echo ${GITHUB_REF} | awk 'BEGIN { FS = "/" } ; { print $3 }'`
          if [ ${GITHUB_REF} == "refs/heads/pre-release" ]
          then
              echo ::set-output name=name::"rogue-dev"
          else
              echo ::set-output name=name::"rogue"
          fi

      # Setup docker build environment
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Login to Dockerhub
      - name: Login to Dockerhub
        uses: docker/login-action@v1
        with:
          username: tidair
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Build and push the docker image
      - name: Build and push image to Dockerhub
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: tidair/${{ steps.get_image_info.outputs.name }}:${{ steps.get_image_info.outputs.tag }}
          build-args: branch=${{ steps.get_image_info.outputs.branch }}

